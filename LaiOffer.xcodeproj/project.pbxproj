// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		97080AF31A65BB72007B809D /* Longest Length Product.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080AF21A65BB72007B809D /* Longest Length Product.cpp */; };
		97080AF51A65BC92007B809D /* K-th Smallest Num in Function.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080AF41A65BC92007B809D /* K-th Smallest Num in Function.cpp */; };
		97080AF71A65BD17007B809D /* K-th Closest.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080AF61A65BD17007B809D /* K-th Closest.cpp */; };
		97080AF91A65CA5E007B809D /* Shortest Path in Gym.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080AF81A65CA5E007B809D /* Shortest Path in Gym.cpp */; };
		97080AFC1A65CACF007B809D /* Sort Integer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080AFB1A65CACF007B809D /* Sort Integer.cpp */; };
		97080AFF1A685F5D007B809D /* K-th Smallest Num in Two Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080AFE1A685F5D007B809D /* K-th Smallest Num in Two Sorted Arr.cpp */; };
		97080B011A688C92007B809D /* LRU Cache.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B001A688C92007B809D /* LRU Cache.cpp */; };
		97080B041A688D3D007B809D /* Str to Hex Int.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B031A688D3D007B809D /* Str to Hex Int.cpp */; };
		97080B071A6AFEA5007B809D /* Max Elem in Window.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B061A6AFEA5007B809D /* Max Elem in Window.cpp */; };
		97080B091A6B1AF4007B809D /* First Non-Repeating Char in Stream.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B081A6B1AF4007B809D /* First Non-Repeating Char in Stream.cpp */; };
		97080B0B1A6B3798007B809D /* Majority Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B0A1A6B3798007B809D /* Majority Num.cpp */; };
		97080B0F1A6C6B9B007B809D /* Could be Merged by Two Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B0E1A6C6B9B007B809D /* Could be Merged by Two Arr.cpp */; };
		97080B131A6C702B007B809D /* Reconstruct Bianry Tree With pre_in Order.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B121A6C702B007B809D /* Reconstruct Bianry Tree With pre_in Order.cpp */; };
		97080B151A6C70E7007B809D /* Reconstruct Binary Tree With post_in Order.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B141A6C70E7007B809D /* Reconstruct Binary Tree With post_in Order.cpp */; };
		97080B171A6C714C007B809D /* Reconstruct Binary Tree With level_in Order.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B161A6C714C007B809D /* Reconstruct Binary Tree With level_in Order.cpp */; };
		97080B1A1A6C76C2007B809D /* Most Points on a Line.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B191A6C76C2007B809D /* Most Points on a Line.cpp */; };
		97080B1C1A6C776A007B809D /* Largest Set of Points with Positive Slope.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B1B1A6C776A007B809D /* Largest Set of Points with Positive Slope.cpp */; };
		97080B1E1A6C77FA007B809D /* Search Suggestion System.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B1D1A6C77FA007B809D /* Search Suggestion System.cpp */; };
		97080B201A6C78B9007B809D /* Generate Random Maze.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B1F1A6C78B9007B809D /* Generate Random Maze.cpp */; };
		97080B221A6C78F7007B809D /* Disjoint White Objects.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B211A6C78F7007B809D /* Disjoint White Objects.cpp */; };
		97080B241A6DEAFE007B809D /* Reorder Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B231A6DEAFE007B809D /* Reorder Linked List.cpp */; };
		97080B261A6EE6EF007B809D /* K-th Smallest Num in Sorted Matrix.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B251A6EE6EF007B809D /* K-th Smallest Num in Sorted Matrix.cpp */; };
		97080B2B1A6EFDA2007B809D /* Top K Frequent Words.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B2A1A6EFDA2007B809D /* Top K Frequent Words.cpp */; };
		97080B2D1A6F5B6B007B809D /* Encode Space.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B2C1A6F5B6B007B809D /* Encode Space.cpp */; };
		97080B2F1A6F5BCB007B809D /* Remove Adjacent Repeated Char.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B2E1A6F5BCB007B809D /* Remove Adjacent Repeated Char.cpp */; };
		97080B311A6F6379007B809D /* Remove Adjacent Repeated CharII.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B301A6F6379007B809D /* Remove Adjacent Repeated CharII.cpp */; };
		97080B331A6F6C57007B809D /* Reverse Words in Sentence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B321A6F6C57007B809D /* Reverse Words in Sentence.cpp */; };
		97080B351A6F7C06007B809D /* Remove Dup in Sorted Arr keep one.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B341A6F7C06007B809D /* Remove Dup in Sorted Arr keep one.cpp */; };
		97080B371A6F7C61007B809D /* Remove Dup in Sorted Arr keep two.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B361A6F7C61007B809D /* Remove Dup in Sorted Arr keep two.cpp */; };
		97080B391A6F8087007B809D /* Remove Dup in Sorted Arr keep none.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B381A6F8087007B809D /* Remove Dup in Sorted Arr keep none.cpp */; };
		97080B3B1A70837B007B809D /* Largest and Smallest.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B3A1A70837B007B809D /* Largest and Smallest.cpp */; };
		97080B3D1A708D86007B809D /* Largest and Second Largest.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B3C1A708D86007B809D /* Largest and Second Largest.cpp */; };
		97080B3F1A709296007B809D /* is Substring.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B3E1A709296007B809D /* is Substring.cpp */; };
		97080B411A70AB1B007B809D /* Deduplicate Same Adj Char.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97080B401A70AB1B007B809D /* Deduplicate Same Adj Char.cpp */; };
		971C564A1A5A2122001E0315 /* remove element.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56491A5A2122001E0315 /* remove element.cpp */; };
		971C564C1A5A24E8001E0315 /* Rainbow Sort.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C564B1A5A24E8001E0315 /* Rainbow Sort.cpp */; };
		971C564F1A5A30BE001E0315 /* Binary Search.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C564E1A5A30BE001E0315 /* Binary Search.cpp */; };
		971C56511A5A3372001E0315 /* Fibonacci sequence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56501A5A3372001E0315 /* Fibonacci sequence.cpp */; };
		971C56531A5A3A17001E0315 /* pow.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56521A5A3A17001E0315 /* pow.cpp */; };
		971C56551A5A3E5A001E0315 /* First Occurrence Elem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56541A5A3E5A001E0315 /* First Occurrence Elem.cpp */; };
		971C56571A5A44AD001E0315 /* Last Occurrence Elem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56561A5A44AD001E0315 /* Last Occurrence Elem.cpp */; };
		971C56591A5A4AA0001E0315 /* Closest Elem in Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56581A5A4AA0001E0315 /* Closest Elem in Sorted Arr.cpp */; };
		971C565B1A5A4DB5001E0315 /* K Closet Elems in Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C565A1A5A4DB5001E0315 /* K Closet Elems in Sorted Arr.cpp */; };
		971C565D1A5A51A0001E0315 /* unknown size binary search.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C565C1A5A51A0001E0315 /* unknown size binary search.cpp */; };
		971C565F1A5B4BD7001E0315 /* Merge Sort Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C565E1A5B4BD7001E0315 /* Merge Sort Linked List.cpp */; };
		971C56651A5B4C2B001E0315 /* search in shifted sorted arr I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56641A5B4C2B001E0315 /* search in shifted sorted arr I.cpp */; };
		971C56671A5B4C42001E0315 /* search in shifted sorted arr II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56661A5B4C42001E0315 /* search in shifted sorted arr II.cpp */; };
		971C56691A5B4C50001E0315 /* Min in Rotated Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56681A5B4C50001E0315 /* Min in Rotated Sorted Arr.cpp */; };
		971C566B1A5B4C67001E0315 /* Total Occurrence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C566A1A5B4C67001E0315 /* Total Occurrence.cpp */; };
		971C566F1A5B5DDB001E0315 /* Deep Copy Skip List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C566E1A5B5DDB001E0315 /* Deep Copy Skip List.cpp */; };
		971C56711A5B6D5B001E0315 /* Copy Linked List with Random Pointer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56701A5B6D5B001E0315 /* Copy Linked List with Random Pointer.cpp */; };
		971C56731A5B6FCF001E0315 /* Merge K Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56721A5B6FCF001E0315 /* Merge K Sorted Arr.cpp */; };
		971C56751A5B700D001E0315 /* Merge K Sorted Lists.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56741A5B700D001E0315 /* Merge K Sorted Lists.cpp */; };
		971C56771A5B7045001E0315 /* Closest Number in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56761A5B7045001E0315 /* Closest Number in BST.cpp */; };
		971C567A1A5B7093001E0315 /* Largest Number Smaller in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 971C56791A5B7093001E0315 /* Largest Number Smaller in BST.cpp */; };
		972959801A79C99400C8BC04 /* Mid Node of Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9729597F1A79C99400C8BC04 /* Mid Node of Linked List.cpp */; };
		972959821A79C9E600C8BC04 /* Check Cycle and Find Cycle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 972959811A79C9E600C8BC04 /* Check Cycle and Find Cycle.cpp */; };
		972959861A7A164300C8BC04 /* 2D Binary Search.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 972959851A7A164300C8BC04 /* 2D Binary Search.cpp */; };
		972959881A7AEFC000C8BC04 /* Partition Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 972959871A7AEFC000C8BC04 /* Partition Linked List.cpp */; };
		9729598A1A7AF04500C8BC04 /* Queue by Two Stacks.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 972959891A7AF04500C8BC04 /* Queue by Two Stacks.cpp */; };
		9729598C1A7B064100C8BC04 /* K Smallest Num in Unsorted Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9729598B1A7B064100C8BC04 /* K Smallest Num in Unsorted Array.cpp */; };
		973035A51B519F56000DC652 /* Longest subArr have Even 0 1.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 973035A41B519F56000DC652 /* Longest subArr have Even 0 1.cpp */; };
		973035A71B535F9A000DC652 /* Word Search.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 973035A61B535F9A000DC652 /* Word Search.cpp */; };
		973AA1311AA6B87C00C17790 /* Median Tracker.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 973AA1301AA6B87C00C17790 /* Median Tracker.cpp */; };
		97457E031ADCA9D8007A07A6 /* Edit Distance.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97457E021ADCA9D8007A07A6 /* Edit Distance.cpp */; };
		97457E051ADF4BB3007A07A6 /* Palindrome Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97457E041ADF4BB3007A07A6 /* Palindrome Num.cpp */; };
		97457E071ADF5FF5007A07A6 /* Sort Arr by Frequency.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97457E061ADF5FF5007A07A6 /* Sort Arr by Frequency.cpp */; };
		974D5B7F1A5B70C7009A6D35 /* Deep Copy Undirectd Graph.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B7E1A5B70C7009A6D35 /* Deep Copy Undirectd Graph.cpp */; };
		974D5B831A5BAF07009A6D35 /* Longest Common Subsequence btw two strings.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B821A5BAF07009A6D35 /* Longest Common Subsequence btw two strings.cpp */; };
		974D5B851A5BAF2B009A6D35 /* Longest Common Substring btw two strings.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B841A5BAF2B009A6D35 /* Longest Common Substring btw two strings.cpp */; };
		974D5B871A5C5F3F009A6D35 /* Common Num in Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B861A5C5F3F009A6D35 /* Common Num in Sorted Arr.cpp */; };
		974D5B8A1A5C6C7E009A6D35 /* Remove Node in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B891A5C6C7E009A6D35 /* Remove Node in BST.cpp */; };
		974D5B8C1A5C6C93009A6D35 /* Insert Node in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B8B1A5C6C93009A6D35 /* Insert Node in BST.cpp */; };
		974D5B8E1A5C6D74009A6D35 /* Is Balanced Bianry Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B8D1A5C6D74009A6D35 /* Is Balanced Bianry Tree.cpp */; };
		974D5B901A5C6DC4009A6D35 /* Max Sum Leaf to Leaf.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B8F1A5C6DC4009A6D35 /* Max Sum Leaf to Leaf.cpp */; };
		974D5B941A5CD6C5009A6D35 /* Height of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B931A5CD6C5009A6D35 /* Height of Binary Tree.cpp */; };
		974D5B961A5CE809009A6D35 /* Decompress String I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B951A5CE809009A6D35 /* Decompress String I.cpp */; };
		974D5B981A5CE865009A6D35 /* Decompress String II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B971A5CE865009A6D35 /* Decompress String II.cpp */; };
		974D5B9A1A5CE8D2009A6D35 /* Compress String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B991A5CE8D2009A6D35 /* Compress String.cpp */; };
		974D5B9C1A5CE963009A6D35 /* String Replace.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B9B1A5CE963009A6D35 /* String Replace.cpp */; };
		974D5B9F1A5DF89F009A6D35 /* Find Node with Max Diff Subtree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5B9E1A5DF89E009A6D35 /* Find Node with Max Diff Subtree.cpp */; };
		974D5BA31A5E0A26009A6D35 /* Insert in Sorted Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BA21A5E0A26009A6D35 /* Insert in Sorted Linked List.cpp */; };
		974D5BA51A5E0C0A009A6D35 /* Merge Two Sorted Linked Lists.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BA41A5E0C0A009A6D35 /* Merge Two Sorted Linked Lists.cpp */; };
		974D5BA81A5E2DF1009A6D35 /* Reverse Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BA71A5E2DF1009A6D35 /* Reverse Linked List.cpp */; };
		974D5BAA1A5E77A2009A6D35 /* Swap Pair Nodes in Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BA91A5E77A2009A6D35 /* Swap Pair Nodes in Linked List.cpp */; };
		974D5BAC1A5E823C009A6D35 /* Reverse Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BAB1A5E823C009A6D35 /* Reverse Binary Tree.cpp */; };
		974D5BAE1A60894B009A6D35 /* Keep Nodes Within Range.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BAD1A60894B009A6D35 /* Keep Nodes Within Range.cpp */; };
		974D5BB71A611908009A6D35 /* Max Sum Root to Leaf.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BB61A611908009A6D35 /* Max Sum Root to Leaf.cpp */; };
		974D5BB91A61DBBB009A6D35 /* Has Sum Any to Any(Root to Leaf).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BB81A61DBBB009A6D35 /* Has Sum Any to Any(Root to Leaf).cpp */; };
		974D5BBB1A61DD97009A6D35 /* Longest Distance Leaf to Leaf.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 974D5BBA1A61DD97009A6D35 /* Longest Distance Leaf to Leaf.cpp */; };
		97619D171A58E9B500133E44 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97619D161A58E9B500133E44 /* main.cpp */; };
		97619D1F1A58EA0900133E44 /* Selection Sort Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97619D1E1A58EA0900133E44 /* Selection Sort Array.cpp */; };
		97619D211A590B1B00133E44 /* Merge Sort Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97619D201A590B1B00133E44 /* Merge Sort Array.cpp */; };
		97619D231A599DFC00133E44 /* Quick Sort Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97619D221A599DFC00133E44 /* Quick Sort Array.cpp */; };
		97619D251A5A184F00133E44 /* Move Zero to Right End.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97619D241A5A184F00133E44 /* Move Zero to Right End.cpp */; };
		9762EC821ACCCA6C00F95AB6 /* Max Sum Anynode to Anynode.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9762EC811ACCCA6C00F95AB6 /* Max Sum Anynode to Anynode.cpp */; };
		9765FB621AB29C2900489CC0 /* Fibonacci.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9765FB611AB29C2900489CC0 /* Fibonacci.cpp */; };
		9765FB641AB2B9EF00489CC0 /* Longest Increasing Subarray.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9765FB631AB2B9EF00489CC0 /* Longest Increasing Subarray.cpp */; };
		9765FB661AB2BF6700489CC0 /* Maximal Product When Cutting Rope.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9765FB651AB2BF6700489CC0 /* Maximal Product When Cutting Rope.cpp */; };
		9765FB681AB2C08500489CC0 /* Jump Game_jump to end or not.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9765FB671AB2C08500489CC0 /* Jump Game_jump to end or not.cpp */; };
		976D3F1F1AD0E1E00033B750 /* 2D_arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 976D3F1E1AD0E1E00033B750 /* 2D_arr.cpp */; };
		976D3F241AD1CF900033B750 /* 2Sum_rotated_sorted_arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 976D3F231AD1CF900033B750 /* 2Sum_rotated_sorted_arr.cpp */; };
		976D3F261AD1CFC40033B750 /* is_cousin.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 976D3F251AD1CFC40033B750 /* is_cousin.cpp */; };
		976D3F281AD212320033B750 /* Isomorphic str.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 976D3F271AD212320033B750 /* Isomorphic str.cpp */; };
		976D3F2A1AD21B8C0033B750 /* shortest_square_in_num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 976D3F291AD21B8C0033B750 /* shortest_square_in_num.cpp */; };
		978712B41AE2D66E00957360 /* Q1.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978712B31AE2D66E00957360 /* Q1.cpp */; };
		978712B61AE2DDA500957360 /* Q2.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978712B51AE2DDA500957360 /* Q2.cpp */; };
		978712B81AE2E16A00957360 /* Q3.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978712B71AE2E16A00957360 /* Q3.cpp */; };
		978712BA1AE2E53000957360 /* Q4.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978712B91AE2E53000957360 /* Q4.cpp */; };
		97895D061B16BE5A00C33E15 /* ID Pool Implementation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D051B16BE5A00C33E15 /* ID Pool Implementation.cpp */; };
		97895D081B17C11E00C33E15 /* Smallest Larger Than Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D071B17C11E00C33E15 /* Smallest Larger Than Target.cpp */; };
		97895D0A1B17C56000C33E15 /* Largest Smaller Than Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D091B17C56000C33E15 /* Largest Smaller Than Target.cpp */; };
		97895D0C1B17CD0C00C33E15 /* Find Local Min.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D0B1B17CD0C00C33E15 /* Find Local Min.cpp */; };
		97895D0E1B17D49E00C33E15 /* Find Max in Sorted Reversed Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D0D1B17D49E00C33E15 /* Find Max in Sorted Reversed Arr.cpp */; };
		97895D101B17DFD800C33E15 /* Divide.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D0F1B17DFD800C33E15 /* Divide.cpp */; };
		97895D131B19038F00C33E15 /* Num of Values Smaller than Target in Young's Matrix.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D121B19038F00C33E15 /* Num of Values Smaller than Target in Young's Matrix.cpp */; };
		97895D151B197EC000C33E15 /* First Non-Repeat Char in String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D141B197EC000C33E15 /* First Non-Repeat Char in String.cpp */; };
		97895D171B1A228800C33E15 /* Replace to get Longest Continuous Sequence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D161B1A228800C33E15 /* Replace to get Longest Continuous Sequence.cpp */; };
		97895D191B1A7A6C00C33E15 /* Check Has Triangle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D181B1A7A6C00C33E15 /* Check Has Triangle.cpp */; };
		97895D1B1B1A883E00C33E15 /* Design BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D1A1B1A883E00C33E15 /* Design BST.cpp */; };
		97895D1D1B1A89D900C33E15 /* Sort Arr based on Occurrence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D1C1B1A89D900C33E15 /* Sort Arr based on Occurrence.cpp */; };
		97895D1F1B1BE4CE00C33E15 /* Find Two Repeating Num(1-N).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D1E1B1BE4CE00C33E15 /* Find Two Repeating Num(1-N).cpp */; };
		97895D211B1BE7C600C33E15 /* First Missing Positive.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D201B1BE7C600C33E15 /* First Missing Positive.cpp */; };
		97895D231B1F9B6D00C33E15 /* Num of Path Sum Root to Leaf.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D221B1F9B6D00C33E15 /* Num of Path Sum Root to Leaf.cpp */; };
		97895D251B1FAA8C00C33E15 /* Eight Queens.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D241B1FAA8C00C33E15 /* Eight Queens.cpp */; };
		97895D271B1FCEA500C33E15 /* Arrange to Form Biggest Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D261B1FCEA500C33E15 /* Arrange to Form Biggest Num.cpp */; };
		97895D291B1FEEC200C33E15 /* Next Permutation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D281B1FEEC200C33E15 /* Next Permutation.cpp */; };
		97895D2C1B20197100C33E15 /* All exist Twice but One Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D2B1B20197100C33E15 /* All exist Twice but One Num.cpp */; };
		97895D2E1B201DFC00C33E15 /* All exist Three times but One Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D2D1B201DFC00C33E15 /* All exist Three times but One Num.cpp */; };
		97895D301B20D66000C33E15 /* Biggest Product of 3 Nums.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D2F1B20D66000C33E15 /* Biggest Product of 3 Nums.cpp */; };
		97895D321B20DE5200C33E15 /* 2Sum All Pair Find Value(has dup).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97895D311B20DE5200C33E15 /* 2Sum All Pair Find Value(has dup).cpp */; };
		978AAA401A9CD8C200ED046A /* Most Frequent Char in String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA3F1A9CD8C200ED046A /* Most Frequent Char in String.cpp */; };
		978AAA421A9CDD4500ED046A /* Remove Space in String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA411A9CDD4500ED046A /* Remove Space in String.cpp */; };
		978AAA441A9CE7F700ED046A /* Remove Adjacent Repeated Chars III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA431A9CE7F700ED046A /* Remove Adjacent Repeated Chars III.cpp */; };
		978AAA461A9CF2AA00ED046A /* 2Sum One Pair Find Index.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA451A9CF2AA00ED046A /* 2Sum One Pair Find Index.cpp */; };
		978AAA481A9CF61D00ED046A /* 2D Liner Search.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA471A9CF61D00ED046A /* 2D Liner Search.cpp */; };
		978AAA4B1A9D8C1900ED046A /* Remove Particular Chars From String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA4A1A9D8C1900ED046A /* Remove Particular Chars From String.cpp */; };
		978AAA4F1A9E4DCB00ED046A /* Reverse a string.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA4E1A9E4DCB00ED046A /* Reverse a string.cpp */; };
		978AAA511A9E502D00ED046A /* Shift Word.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 978AAA501A9E502D00ED046A /* Shift Word.cpp */; };
		979537911B44BC74002183CF /* Is Permutation Strings.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979537901B44BC74002183CF /* Is Permutation Strings.cpp */; };
		979537941B44C0AB002183CF /* Compress Str.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979537921B44C0AB002183CF /* Compress Str.cpp */; };
		979A936C1AB3A591007DE692 /* Min Number of Jumps.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A936B1AB3A591007DE692 /* Min Number of Jumps.cpp */; };
		979A936E1AB3A5D4007DE692 /* Largest Sum of Subarr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A936D1AB3A5D4007DE692 /* Largest Sum of Subarr.cpp */; };
		979A93701AB3AE75007DE692 /* Longest Increasing Subsequence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A936F1AB3AE75007DE692 /* Longest Increasing Subsequence.cpp */; };
		979A93721AB3BF1C007DE692 /* Longest Consecutive 1s.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93711AB3BF1C007DE692 /* Longest Consecutive 1s.cpp */; };
		979A93741AB3DC81007DE692 /* Largest Square of 1s in Matrix.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93731AB3DC81007DE692 /* Largest Square of 1s in Matrix.cpp */; };
		979A93761AB3E0C8007DE692 /* Largest Cross 1s.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93751AB3E0C8007DE692 /* Largest Cross 1s.cpp */; };
		979A93791AB3F3E8007DE692 /* Largest Subsquare Surrounded by 1.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93781AB3F3E8007DE692 /* Largest Subsquare Surrounded by 1.cpp */; };
		979A937B1AB3F47D007DE692 /* Largest Sum Submatrix.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A937A1AB3F47D007DE692 /* Largest Sum Submatrix.cpp */; };
		979A937F1AB41138007DE692 /* Buy StockI.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A937E1AB41138007DE692 /* Buy StockI.cpp */; };
		979A93811AB411A7007DE692 /* Buy StockII.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93801AB411A7007DE692 /* Buy StockII.cpp */; };
		979A93831AB4FE44007DE692 /* Shuffle Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93821AB4FE44007DE692 /* Shuffle Array.cpp */; };
		979A93851AB507B6007DE692 /* Majority Num II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93841AB507B6007DE692 /* Majority Num II.cpp */; };
		979A93871AB529D4007DE692 /* Interleave Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93861AB529D4007DE692 /* Interleave Array.cpp */; };
		979A93891AB53678007DE692 /* k-th Smallest Num with 3.5.7 Factor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 979A93881AB53678007DE692 /* k-th Smallest Num with 3.5.7 Factor.cpp */; };
		97A4F0FC1AEF2F1A00142761 /* Sort by 3 Stacks.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F0FB1AEF2F1A00142761 /* Sort by 3 Stacks.cpp */; };
		97A4F0FE1AF1997900142761 /* Plus One.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F0FD1AF1997900142761 /* Plus One.cpp */; };
		97A4F1001AF1A69B00142761 /* Pascal's Trangle II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F0FF1AF1A69B00142761 /* Pascal's Trangle II.cpp */; };
		97A4F1021AF1AD3400142761 /* Missing Range.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1011AF1AD3400142761 /* Missing Range.cpp */; };
		97A4F1041AF1D52D00142761 /* sqrt.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1031AF1D52D00142761 /* sqrt.cpp */; };
		97A4F1081AF1F55900142761 /* Single Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1071AF1F55900142761 /* Single Num.cpp */; };
		97A4F10A1AF2ABFD00142761 /* Remove Linked List Elem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1091AF2ABFD00142761 /* Remove Linked List Elem.cpp */; };
		97A4F10C1AF2C97000142761 /* Partition Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F10B1AF2C97000142761 /* Partition Arr.cpp */; };
		97A4F10E1AF2CEDA00142761 /* Interleave Positive Negative Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F10D1AF2CEDA00142761 /* Interleave Positive Negative Num.cpp */; };
		97A4F1121AF2DFF000142761 /* Intersection Union Diff of Two Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1111AF2DFF000142761 /* Intersection Union Diff of Two Sorted Arr.cpp */; };
		97A4F1141AF2EB1700142761 /* Find Max in Increase Decrease Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1131AF2EB1700142761 /* Find Max in Increase Decrease Arr.cpp */; };
		97A4F1161AF2FAC300142761 /* Remove Nodes by Indices.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1151AF2FAC300142761 /* Remove Nodes by Indices.cpp */; };
		97A4F1181AF3008500142761 /* Longest Sublist without Dup Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97A4F1171AF3008500142761 /* Longest Sublist without Dup Nodes.cpp */; };
		97AD03101AF6E82D00703834 /* Delete Node in List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97AD030F1AF6E82D00703834 /* Delete Node in List.cpp */; };
		97AD03131AF9B7C700703834 /* Subarr Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97AD03121AF9B7C700703834 /* Subarr Sum.cpp */; };
		97AF0E471AA7A581003EA180 /* Is Palindrome Linke List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97AF0E461AA7A581003EA180 /* Is Palindrome Linke List.cpp */; };
		97AF0E491AA7ACC5003EA180 /* Right View of BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97AF0E481AA7ACC5003EA180 /* Right View of BT.cpp */; };
		97AF0E4F1AA84E88003EA180 /* Find Words Cycle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97AF0E4E1AA84E88003EA180 /* Find Words Cycle.cpp */; };
		97AF0E511AAD5946003EA180 /* Singleton.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97AF0E501AAD5946003EA180 /* Singleton.cpp */; };
		97B4230A1B48616000B8F329 /* Num of Possible Triangles.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423091B48616000B8F329 /* Num of Possible Triangles.cpp */; };
		97B4230F1B49993A00B8F329 /* Use Arr build Stack.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B4230E1B49993A00B8F329 /* Use Arr build Stack.cpp */; };
		97B423111B49A64400B8F329 /* Set of Stacks.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423101B49A64400B8F329 /* Set of Stacks.cpp */; };
		97B423131B49AC1800B8F329 /* Sort One Stack.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423121B49AC1800B8F329 /* Sort One Stack.cpp */; };
		97B423161B49AFCB00B8F329 /* has Root btw Two Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423151B49AFCB00B8F329 /* has Root btw Two Nodes.cpp */; };
		97B423181B49B58400B8F329 /* Sorted Arr to BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423171B49B58400B8F329 /* Sorted Arr to BST.cpp */; };
		97B4231A1B49CA4B00B8F329 /* Create LinkedList on Each Level.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423191B49CA4B00B8F329 /* Create LinkedList on Each Level.cpp */; };
		97B4231C1B49E7D800B8F329 /* All Paths Sum to Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B4231B1B49E7D800B8F329 /* All Paths Sum to Target.cpp */; };
		97B4231E1B4A0F1300B8F329 /* sum of All Digits.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B4231D1B4A0F1300B8F329 /* sum of All Digits.cpp */; };
		97B423211B4A230600B8F329 /* Climb Stairs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423201B4A230600B8F329 /* Climb Stairs.cpp */; };
		97B423231B4B24C300B8F329 /* Bubble Sort.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423221B4B24C300B8F329 /* Bubble Sort.cpp */; };
		97B423251B4B693B00B8F329 /* Search with Empty Str.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423241B4B693B00B8F329 /* Search with Empty Str.cpp */; };
		97B423271B4C6F9000B8F329 /* get Rank of Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423261B4C6F9000B8F329 /* get Rank of Num.cpp */; };
		97B423291B4C92C800B8F329 /* print Last K Lines in File.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97B423281B4C92C800B8F329 /* print Last K Lines in File.cpp */; };
		97BEF4841A733E7D00FDB6DA /* 2Sum All Pair Find Index.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF4831A733E7D00FDB6DA /* 2Sum All Pair Find Index.cpp */; };
		97BEF4891A7346B200FDB6DA /* shift string.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF4881A7346B200FDB6DA /* shift string.cpp */; };
		97BEF48B1A74665F00FDB6DA /* 2Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF48A1A74665F00FDB6DA /* 2Sum.cpp */; };
		97BEF48D1A746BDD00FDB6DA /* 2Sum All Pair Find Value(no dup).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF48C1A746BDD00FDB6DA /* 2Sum All Pair Find Value(no dup).cpp */; };
		97BEF48F1A74752100FDB6DA /* 2Sum Closest Find Value.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF48E1A74752100FDB6DA /* 2Sum Closest Find Value.cpp */; };
		97BEF4911A748C8A00FDB6DA /* 3Sum Find Value.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF4901A748C8A00FDB6DA /* 3Sum Find Value.cpp */; };
		97BEF4931A75AF8900FDB6DA /* Inversion Pair in Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF4921A75AF8900FDB6DA /* Inversion Pair in Array.cpp */; };
		97BEF4951A75CE5C00FDB6DA /* 2Sum Smaller Find Value.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97BEF4941A75CE5C00FDB6DA /* 2Sum Smaller Find Value.cpp */; };
		97C30C441B0FE7D800C2CE98 /* Templates Use.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97C30C431B0FE7D800C2CE98 /* Templates Use.cpp */; };
		97C30C461B0FF78E00C2CE98 /* Inheritance.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97C30C451B0FF78E00C2CE98 /* Inheritance.cpp */; };
		97C30C481B0FFA5200C2CE98 /* Virtual Function.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97C30C471B0FFA5200C2CE98 /* Virtual Function.cpp */; };
		97C3FA561ACE07DC00573E43 /* Max Sum Any to Any(Root to Leaf).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97C3FA551ACE07DC00573E43 /* Max Sum Any to Any(Root to Leaf).cpp */; };
		97CA53771AA290460056534F /* Rotate Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53761AA290460056534F /* Rotate Array.cpp */; };
		97CA53791AA29F0A0056534F /* Merge Two Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53781AA29F0A0056534F /* Merge Two Sorted Arr.cpp */; };
		97CA537C1AA2A5350056534F /* Find Insert Position NoDup.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA537B1AA2A5350056534F /* Find Insert Position NoDup.cpp */; };
		97CA537E1AA2A7470056534F /* Rotate Image.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA537D1AA2A7470056534F /* Rotate Image.cpp */; };
		97CA53811AA2C9570056534F /* Search for a Range.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53801AA2C9570056534F /* Search for a Range.cpp */; };
		97CA53831AA2FB040056534F /* Find Peak Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53821AA2FB040056534F /* Find Peak Num.cpp */; };
		97CA53851AA406DD0056534F /* Set Matrix Zero.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53841AA406DD0056534F /* Set Matrix Zero.cpp */; };
		97CA53871AA407410056534F /* Pascal's Trangle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53861AA407410056534F /* Pascal's Trangle.cpp */; };
		97CA538B1AA40ADF0056534F /* Add Binary.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA538A1AA40ADF0056534F /* Add Binary.cpp */; };
		97CA538D1AA40C550056534F /* Compare Version Numbers.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA538C1AA40C550056534F /* Compare Version Numbers.cpp */; };
		97CA538F1AA40CA00056534F /* Count and Say.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA538E1AA40CA00056534F /* Count and Say.cpp */; };
		97CA53911AA40DC90056534F /* Longest Palindromic Substring.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53901AA40DC90056534F /* Longest Palindromic Substring.cpp */; };
		97CA53931AA40E2F0056534F /* Longest Common Prefix.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53921AA40E2F0056534F /* Longest Common Prefix.cpp */; };
		97CA53951AA40F040056534F /* Valid Palindrome.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53941AA40F040056534F /* Valid Palindrome.cpp */; };
		97CA53971AA40F450056534F /* String to Int.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53961AA40F450056534F /* String to Int.cpp */; };
		97CA53991AA40FE40056534F /* Valid Parentheses.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53981AA40FE40056534F /* Valid Parentheses.cpp */; };
		97CA539B1AA410670056534F /* Length of Last Word.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA539A1AA410670056534F /* Length of Last Word.cpp */; };
		97CA539D1AA4109F0056534F /* Group Anagrams.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA539C1AA4109F0056534F /* Group Anagrams.cpp */; };
		97CA539F1AA445370056534F /* Longest Substr Without Repeated Chars.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA539E1AA445370056534F /* Longest Substr Without Repeated Chars.cpp */; };
		97CA53A31AA626C60056534F /* Get Left Subtree Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53A21AA626C60056534F /* Get Left Subtree Nodes.cpp */; };
		97CA53A51AA62DF20056534F /* String Matching.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53A41AA62DF20056534F /* String Matching.cpp */; };
		97CA53A71AA63CAA0056534F /* x^x.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53A61AA63CAA0056534F /* x^x.cpp */; };
		97CA53A91AA646460056534F /* Spiral Order Traverse I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53A81AA646460056534F /* Spiral Order Traverse I.cpp */; };
		97CA53AB1AA64A200056534F /* Spiral Order Traverse II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53AA1AA64A200056534F /* Spiral Order Traverse II.cpp */; };
		97CA53AD1AA64D740056534F /* Spiral Order Generate II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53AC1AA64D740056534F /* Spiral Order Generate II.cpp */; };
		97CA53AF1AA68D4C0056534F /* Array Deduplication.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97CA53AE1AA68D4C0056534F /* Array Deduplication.cpp */; };
		97D02B591AB53B4200C73F56 /* Reconstruct BST with Pre Order Traversal.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B581AB53B4200C73F56 /* Reconstruct BST with Pre Order Traversal.cpp */; };
		97D02B5B1AB5411500C73F56 /* Reconstruct Complete Binary Tree From Level Order.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B5A1AB5411500C73F56 /* Reconstruct Complete Binary Tree From Level Order.cpp */; };
		97D02B5D1AB6587E00C73F56 /* Word Ladder.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B5C1AB6587E00C73F56 /* Word Ladder.cpp */; };
		97D02B5F1AB66F2B00C73F56 /* 2Sum 2 Arrays.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B5E1AB66F2B00C73F56 /* 2Sum 2 Arrays.cpp */; };
		97D02B611AB66FC100C73F56 /* 3Sum 3 Arrays.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B601AB66FC100C73F56 /* 3Sum 3 Arrays.cpp */; };
		97D02B631AB68E9000C73F56 /* Add Two ListsI.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B621AB68E9000C73F56 /* Add Two ListsI.cpp */; };
		97D02B651AB68F1A00C73F56 /* Reverse Part of List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B641AB68F1A00C73F56 /* Reverse Part of List.cpp */; };
		97D02B671AB68FD700C73F56 /* Remove Dup in Sorted List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B661AB68FD700C73F56 /* Remove Dup in Sorted List.cpp */; };
		97D02B691AB6906100C73F56 /* Remove Dup in Sorted List II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B681AB6906100C73F56 /* Remove Dup in Sorted List II.cpp */; };
		97D02B6B1AB690D200C73F56 /* Remove Dup in Unsorted List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B6A1AB690D200C73F56 /* Remove Dup in Unsorted List.cpp */; };
		97D02B6D1AB6912700C73F56 /* Remove Nth From End of List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B6C1AB6912700C73F56 /* Remove Nth From End of List.cpp */; };
		97D02B6F1AB6917E00C73F56 /* Find Nth Node From End of List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B6E1AB6917E00C73F56 /* Find Nth Node From End of List.cpp */; };
		97D02B711AB691EE00C73F56 /* Rotate List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B701AB691EE00C73F56 /* Rotate List.cpp */; };
		97D02B731AB6928100C73F56 /* Merge Two Lists Alternatively.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B721AB6928100C73F56 /* Merge Two Lists Alternatively.cpp */; };
		97D02B751AB6930F00C73F56 /* Intersection of Two Lists.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B741AB6930F00C73F56 /* Intersection of Two Lists.cpp */; };
		97D02B781AB7666900C73F56 /* Merge Overlapping Intervals.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B771AB7666900C73F56 /* Merge Overlapping Intervals.cpp */; };
		97D02B7A1AB766FE00C73F56 /* Pattern Matche.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B791AB766FE00C73F56 /* Pattern Matche.cpp */; };
		97D02B7C1AB7677D00C73F56 /* Largest Val from Arr of Nums in String type.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B7B1AB7677D00C73F56 /* Largest Val from Arr of Nums in String type.cpp */; };
		97D02B7E1AB767AF00C73F56 /* Top View of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B7D1AB767AF00C73F56 /* Top View of Binary Tree.cpp */; };
		97D02B801AB7682700C73F56 /* Divide Set into Two Subset with Min diff of Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B7F1AB7682700C73F56 /* Divide Set into Two Subset with Min diff of Sum.cpp */; };
		97D02B821AB7687A00C73F56 /* Transform a BST to Greater Sum Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B811AB7687A00C73F56 /* Transform a BST to Greater Sum Tree.cpp */; };
		97D02B841AB768D900C73F56 /* Connect Right NULL Child to inorder Successor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B831AB768D900C73F56 /* Connect Right NULL Child to inorder Successor.cpp */; };
		97D02B861AB7698B00C73F56 /* Count Num of Words in String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B851AB7698B00C73F56 /* Count Num of Words in String.cpp */; };
		97D02B881AB769D400C73F56 /* Reconstruct BST from PreOrder.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B871AB769D400C73F56 /* Reconstruct BST from PreOrder.cpp */; };
		97D02B8A1AB76A6000C73F56 /* Insert Least Num of Char to make String Palindrome.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B891AB76A6000C73F56 /* Insert Least Num of Char to make String Palindrome.cpp */; };
		97D02B8C1AB76B5E00C73F56 /* All Subsequence From String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B8B1AB76B5E00C73F56 /* All Subsequence From String.cpp */; };
		97D02B8E1AB76BA800C73F56 /* All Combination of Factor could Multiply to Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B8D1AB76BA800C73F56 /* All Combination of Factor could Multiply to Target.cpp */; };
		97D02B901AB76C5E00C73F56 /* Find Order of Chars in Dic.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B8F1AB76C5E00C73F56 /* Find Order of Chars in Dic.cpp */; };
		97D02B921AB76CF300C73F56 /* Get Count of Right Smaller Nums.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B911AB76CF300C73F56 /* Get Count of Right Smaller Nums.cpp */; };
		97D02B941AB76D3400C73F56 /* Find Only One Dup Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B931AB76D3400C73F56 /* Find Only One Dup Num.cpp */; };
		97D02B961AB76D9D00C73F56 /* Two Nums with Same Diff to Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B951AB76D9D00C73F56 /* Two Nums with Same Diff to Target.cpp */; };
		97D02B981AB76EB100C73F56 /* Bottom View of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B971AB76EB100C73F56 /* Bottom View of Binary Tree.cpp */; };
		97D02B9A1AB76F4D00C73F56 /* Wether Edges could Form a Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B991AB76F4D00C73F56 /* Wether Edges could Form a Tree.cpp */; };
		97D02B9C1AB76F7800C73F56 /* Max Product Subarr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B9B1AB76F7800C73F56 /* Max Product Subarr.cpp */; };
		97D02B9E1AB76FAF00C73F56 /* Matrix Water.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B9D1AB76FAF00C73F56 /* Matrix Water.cpp */; };
		97D02BA01AB76FE400C73F56 /* Find Lowest Node in Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02B9F1AB76FE400C73F56 /* Find Lowest Node in Binary Tree.cpp */; };
		97D02BA21AB7700A00C73F56 /* Count Nodes in Given Range in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BA11AB7700A00C73F56 /* Count Nodes in Given Range in BST.cpp */; };
		97D02BA41AB7703B00C73F56 /* Longest Bitonic Subsequence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BA31AB7703B00C73F56 /* Longest Bitonic Subsequence.cpp */; };
		97D02BA61AB7708F00C73F56 /* Is PostOrder of BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BA51AB7708F00C73F56 /* Is PostOrder of BST.cpp */; };
		97D02BA81AB7712400C73F56 /* Smallest Window in Str Contain all Char of another Str.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BA71AB7712400C73F56 /* Smallest Window in Str Contain all Char of another Str.cpp */; };
		97D02BAA1AB7719200C73F56 /* Has Subarr Sums to Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BA91AB7719200C73F56 /* Has Subarr Sums to Target.cpp */; };
		97D02BAE1AB7721D00C73F56 /* All Combination of K Elem in Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BAD1AB7721D00C73F56 /* All Combination of K Elem in Arr.cpp */; };
		97D02BB01AB7729B00C73F56 /* Positive Negative Alternatively.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BAF1AB7729B00C73F56 /* Positive Negative Alternatively.cpp */; };
		97D02BB21AB772D400C73F56 /* Get PostOrder from InOrder and Preorder from BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BB11AB772D400C73F56 /* Get PostOrder from InOrder and Preorder from BT.cpp */; };
		97D02BB41AB7730600C73F56 /* Convert BT to DLL.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BB31AB7730600C73F56 /* Convert BT to DLL.cpp */; };
		97D02BB61AB7733500C73F56 /* Find Distance Between Two Nodes in BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BB51AB7733500C73F56 /* Find Distance Between Two Nodes in BT.cpp */; };
		97D02BB81AB7738900C73F56 /* Str Chained Form a Circle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BB71AB7738900C73F56 /* Str Chained Form a Circle.cpp */; };
		97D02BBA1AB773B500C73F56 /* Is palindrom List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BB91AB773B500C73F56 /* Is palindrom List.cpp */; };
		97D02BBC1AB773F600C73F56 /* All Paths Sum to Target in BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BBB1AB773F600C73F56 /* All Paths Sum to Target in BT.cpp */; };
		97D02BBE1AB7745800C73F56 /* Is Subtree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BBD1AB7745800C73F56 /* Is Subtree.cpp */; };
		97D02BC01AB774C600C73F56 /* Nested Int Weighted Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BBF1AB774C600C73F56 /* Nested Int Weighted Sum.cpp */; };
		97D02BC21AB7754F00C73F56 /* Is Cousins in BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BC11AB7754F00C73F56 /* Is Cousins in BT.cpp */; };
		97D02BC41AB775AA00C73F56 /* Reverse Alternate Nodes in List and Append at End.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BC31AB775AA00C73F56 /* Reverse Alternate Nodes in List and Append at End.cpp */; };
		97D02BC61AB7762600C73F56 /* Is in Sorted 2D Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BC51AB7762600C73F56 /* Is in Sorted 2D Arr.cpp */; };
		97D02BC81AB7766100C73F56 /* Common Elem in 2D Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BC71AB7766100C73F56 /* Common Elem in 2D Sorted Arr.cpp */; };
		97D02BCA1AB776F600C73F56 /* Diagonal Sum of BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BC91AB776F600C73F56 /* Diagonal Sum of BT.cpp */; };
		97D02BCC1AB7773000C73F56 /* Delete Node with Cost larger than K.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BCB1AB7773000C73F56 /* Delete Node with Cost larger than K.cpp */; };
		97D02BCE1AB7776D00C73F56 /* Closet K Points to Origin.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BCD1AB7776D00C73F56 /* Closet K Points to Origin.cpp */; };
		97D02BD01AB777F200C73F56 /* All Permutation of Str after insert Empty Space.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BCF1AB777F200C73F56 /* All Permutation of Str after insert Empty Space.cpp */; };
		97D02BD21AB7782500C73F56 /* 3Sum Less.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D02BD11AB7782500C73F56 /* 3Sum Less.cpp */; };
		97D303D81A7C42F800D60E6C /* K-th Smallest Sum in Two Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303D71A7C42F800D60E6C /* K-th Smallest Sum in Two Sorted Arr.cpp */; };
		97D303DA1A7CA7B600D60E6C /* Common Num in Unsorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303D91A7CA7B600D60E6C /* Common Num in Unsorted Arr.cpp */; };
		97D303DC1A7DC0A100D60E6C /* All Unique Chars.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303DB1A7DC0A100D60E6C /* All Unique Chars.cpp */; };
		97D303E01A81995B00D60E6C /* ZigZag Traverse Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303DF1A81995B00D60E6C /* ZigZag Traverse Binary Tree.cpp */; };
		97D303E21A819E2D00D60E6C /* Level Order Traverse Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303E11A819E2D00D60E6C /* Level Order Traverse Binary Tree.cpp */; };
		97D303E41A81A30900D60E6C /* Lowest Common Ancestor of BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303E31A81A30900D60E6C /* Lowest Common Ancestor of BT.cpp */; };
		97D303E61A81A6F100D60E6C /* Lowest Common Ancestor has Parent.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303E51A81A6F100D60E6C /* Lowest Common Ancestor has Parent.cpp */; };
		97D303E81A81BB5D00D60E6C /* Lowest Common Ancestor of K Nodes in BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303E71A81BB5D00D60E6C /* Lowest Common Ancestor of K Nodes in BT.cpp */; };
		97D303EA1A81BE6500D60E6C /* Lowest Common Ancestor IV.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303E91A81BE6500D60E6C /* Lowest Common Ancestor IV.cpp */; };
		97D303EC1A81D4AF00D60E6C /* Spiral Order Generate I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303EB1A81D4AF00D60E6C /* Spiral Order Generate I.cpp */; };
		97D303EE1A81EBF200D60E6C /* Sort String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303ED1A81EBF200D60E6C /* Sort String.cpp */; };
		97D303F01A82D6D000D60E6C /* Smallest Num Larger in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303EF1A82D6D000D60E6C /* Smallest Num Larger in BST.cpp */; };
		97D303F21A82DED300D60E6C /* Search Node in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303F11A82DED300D60E6C /* Search Node in BST.cpp */; };
		97D303F51A8317B900D60E6C /* Pre-order traverse.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303F41A8317B900D60E6C /* Pre-order traverse.cpp */; };
		97D303F71A83189700D60E6C /* In-order traverse.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303F61A83189700D60E6C /* In-order traverse.cpp */; };
		97D303F91A8318A600D60E6C /* Post-order traverse.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303F81A8318A600D60E6C /* Post-order traverse.cpp */; };
		97D303FC1A83557600D60E6C /* Symmetric Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303FB1A83557600D60E6C /* Symmetric Binary Tree.cpp */; };
		97D303FE1A83565C00D60E6C /* Same Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303FD1A83565C00D60E6C /* Same Binary Tree.cpp */; };
		97D304001A8357A800D60E6C /* is BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D303FF1A8357A800D60E6C /* is BST.cpp */; };
		97D304021A83582C00D60E6C /* Tweaked Identical Binary Trees.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D304011A83582C00D60E6C /* Tweaked Identical Binary Trees.cpp */; };
		97D304051A86AA7600D60E6C /* Stack with Min().cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D304041A86AA7600D60E6C /* Stack with Min().cpp */; };
		97D304071A86AB8D00D60E6C /* Sort With 3 Stacks.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D304061A86AB8D00D60E6C /* Sort With 3 Stacks.cpp */; };
		97D30D5C1A88105B00FAC61A /* Evaluate Reverse Polish Notation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D5B1A88105B00FAC61A /* Evaluate Reverse Polish Notation.cpp */; };
		97D30D5E1A88426000FAC61A /* Missing One in Unsorted Arr(1-N).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D5D1A88426000FAC61A /* Missing One in Unsorted Arr(1-N).cpp */; };
		97D30D601A89608B00FAC61A /* 3Sum Closest.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D5F1A89608B00FAC61A /* 3Sum Closest.cpp */; };
		97D30D621A8960F300FAC61A /* Print Matrix Clockwise.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D611A8960F300FAC61A /* Print Matrix Clockwise.cpp */; };
		97D30D641A8FA9B200FAC61A /* subset no dup.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D631A8FA9B200FAC61A /* subset no dup.cpp */; };
		97D30D661A8FCE1400FAC61A /* permutation no dup.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D651A8FCE1400FAC61A /* permutation no dup.cpp */; };
		97D30D681A9040E600FAC61A /* subset has dup.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D30D671A9040E600FAC61A /* subset has dup.cpp */; };
		97D320C01B55C947005A3C2B /* Hash Table.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D320BF1B55C947005A3C2B /* Hash Table.cpp */; };
		97D320C21B56C5FF005A3C2B /* Insertion Sort Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D320C11B56C5FF005A3C2B /* Insertion Sort Linked List.cpp */; };
		97D6AC4E1AD453F4007F28C7 /* Linked List Cycle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC4D1AD453F4007F28C7 /* Linked List Cycle.cpp */; };
		97D6AC501AD454DD007F28C7 /* Intersection in Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC4F1AD454DD007F28C7 /* Intersection in Linked List.cpp */; };
		97D6AC521AD45EBC007F28C7 /* Convert Sorted Arr to BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC511AD45EBC007F28C7 /* Convert Sorted Arr to BST.cpp */; };
		97D6AC541AD45FB4007F28C7 /* Design Text Editor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC531AD45FB4007F28C7 /* Design Text Editor.cpp */; };
		97D6AC561AD45FF4007F28C7 /* Longest Path in BT.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC551AD45FF4007F28C7 /* Longest Path in BT.cpp */; };
		97D6AC581AD4E2AA007F28C7 /* Quick Sort Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC571AD4E2AA007F28C7 /* Quick Sort Linked List.cpp */; };
		97D6AC5A1AD4E331007F28C7 /* Selection Sort Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC591AD4E331007F28C7 /* Selection Sort Linked List.cpp */; };
		97D6AC5F1AD5A10F007F28C7 /* Max Heap.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC5D1AD5A10F007F28C7 /* Max Heap.cpp */; };
		97D6AC631AD5C24C007F28C7 /* Is Completed Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC621AD5C24C007F28C7 /* Is Completed Binary Tree.cpp */; };
		97D6AC651AD61DE9007F28C7 /* Hex for Int.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D6AC641AD61DE9007F28C7 /* Hex for Int.cpp */; };
		97D74FCB1AF331C400EE657D /* word play.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FCA1AF331C400EE657D /* word play.cpp */; };
		97D74FCD1AF3D7FA00EE657D /* Mine.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FCC1AF3D7FA00EE657D /* Mine.cpp */; };
		97D74FCF1AF3DF7F00EE657D /* STRING.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FCE1AF3DF7F00EE657D /* STRING.cpp */; };
		97D74FD11AF3FD7C00EE657D /* first non repeat stream.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FD01AF3FD7C00EE657D /* first non repeat stream.cpp */; };
		97D74FD31AF47CF400EE657D /* Swap Two Nodes in List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FD21AF47CF400EE657D /* Swap Two Nodes in List.cpp */; };
		97D74FD51AF55D1C00EE657D /* Distance btw Two Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FD41AF55D1C00EE657D /* Distance btw Two Nodes.cpp */; };
		97D74FD71AF563CA00EE657D /* Subset Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D74FD61AF563CA00EE657D /* Subset Sum.cpp */; };
		97D967781AFDB48900C152EA /* Print All Valid Parentheses.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D967771AFDB48900C152EA /* Print All Valid Parentheses.cpp */; };
		97D9677B1B00122400C152EA /* Common Elem in 3 Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97D9677A1B00122400C152EA /* Common Elem in 3 Sorted Arr.cpp */; };
		97DEC4B31B2DF7A100238313 /* Get Max Product Without One Num.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DEC4B21B2DF7A100238313 /* Get Max Product Without One Num.cpp */; };
		97DEC4C01B2E336900238313 /* Print List Reverse Order.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DEC4BF1B2E336900238313 /* Print List Reverse Order.cpp */; };
		97DEC4C21B2E3AED00238313 /* Reverse Double Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DEC4C11B2E3AED00238313 /* Reverse Double Linked List.cpp */; };
		97DEC4C51B2E403B00238313 /* Reverse Circular List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DEC4C41B2E403B00238313 /* Reverse Circular List.cpp */; };
		97DEC4CD1B2E605500238313 /* Add Two ListsII.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DEC4CC1B2E605500238313 /* Add Two ListsII.cpp */; };
		97DFBE291B2FD12E0039800D /* Remove Nodes Outside of Range.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE281B2FD12E0039800D /* Remove Nodes Outside of Range.cpp */; };
		97DFBE2B1B2FD5CA0039800D /* Remove Trailing Zero Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE2A1B2FD5CA0039800D /* Remove Trailing Zero Nodes.cpp */; };
		97DFBE2D1B2FD9A20039800D /* Heapify Complete Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE2C1B2FD9A20039800D /* Heapify Complete Binary Tree.cpp */; };
		97DFBE331B31DB7E0039800D /* All Visible Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE321B31DB7E0039800D /* All Visible Nodes.cpp */; };
		97DFBE351B31DE030039800D /* In-order Successor Node.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE341B31DE030039800D /* In-order Successor Node.cpp */; };
		97DFBE371B31DF9F0039800D /* kth Smallest in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE361B31DF9F0039800D /* kth Smallest in BST.cpp */; };
		97DFBE451B3246040039800D /* Sort Letter by Case.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE441B3246040039800D /* Sort Letter by Case.cpp */; };
		97DFBE4C1B3259180039800D /* Quick Select Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE4B1B3259180039800D /* Quick Select Arr.cpp */; };
		97DFBE541B3322680039800D /* 2Sum One pair Find Index Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE531B3322680039800D /* 2Sum One pair Find Index Sorted Arr.cpp */; };
		97DFBE561B332D800039800D /* find k-th Smallest Element in Unsorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE551B332D800039800D /* find k-th Smallest Element in Unsorted Arr.cpp */; };
		97DFBE581B332D9B0039800D /* find k-th Largest Element in Unsorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE571B332D9B0039800D /* find k-th Largest Element in Unsorted Arr.cpp */; };
		97DFBE5C1B3335280039800D /* Invert Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE5B1B3335280039800D /* Invert Binary Tree.cpp */; };
		97DFBE5E1B333A650039800D /* Contains Duplicate.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE5D1B333A650039800D /* Contains Duplicate.cpp */; };
		97DFBE601B333E250039800D /* Contains Duplicate II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE5F1B333E250039800D /* Contains Duplicate II.cpp */; };
		97DFBE621B334B2B0039800D /* Contains Duplicate III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE611B334B2B0039800D /* Contains Duplicate III.cpp */; };
		97DFBE641B334E160039800D /* House Robber.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE631B334E160039800D /* House Robber.cpp */; };
		97DFBE661B33624F0039800D /* 2Sum Data Structure Design.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE651B33624F0039800D /* 2Sum Data Structure Design.cpp */; };
		97DFBE681B339DDE0039800D /* Largest Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE671B339DDE0039800D /* Largest Number.cpp */; };
		97DFBE6A1B33A5740039800D /* Binary Search Tree Iterator.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE691B33A5740039800D /* Binary Search Tree Iterator.cpp */; };
		97DFBE6C1B349D2B0039800D /* Implement Trie (Prefix Tree).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE6B1B349D2B0039800D /* Implement Trie (Prefix Tree).cpp */; };
		97DFBE6E1B34B43E0039800D /* Letter Combinations of a Phone Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE6D1B34B43E0039800D /* Letter Combinations of a Phone Number.cpp */; };
		97DFBE701B34CA210039800D /* Count Complete Tree Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE6F1B34CA210039800D /* Count Complete Tree Nodes.cpp */; };
		97DFBE721B34D7B40039800D /* One Edit Distance.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE711B34D7B40039800D /* One Edit Distance.cpp */; };
		97DFBE741B34E87D0039800D /* Min Size Subarray Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE731B34E87D0039800D /* Min Size Subarray Sum.cpp */; };
		97DFBE761B35157E0039800D /* Insert Interval.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE751B35157E0039800D /* Insert Interval.cpp */; };
		97DFBE781B3614AB0039800D /* Permutations.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE771B3614AB0039800D /* Permutations.cpp */; };
		97DFBE7A1B361E0A0039800D /* Border View of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE791B361E0A0039800D /* Border View of Binary Tree.cpp */; };
		97DFBE7C1B3628920039800D /* k Closest to Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE7B1B3628920039800D /* k Closest to Target.cpp */; };
		97DFBE7E1B36396D0039800D /* Roman to Integer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE7D1B36396D0039800D /* Roman to Integer.cpp */; };
		97DFBE801B378F2E0039800D /* Combination Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE7F1B378F2E0039800D /* Combination Sum.cpp */; };
		97DFBE821B37BE870039800D /* Combination Sum II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE811B37BE870039800D /* Combination Sum II.cpp */; };
		97DFBE841B38AA540039800D /* Combinations.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE831B38AA540039800D /* Combinations.cpp */; };
		97DFBE861B38B22C0039800D /* Combination Sum III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97DFBE851B38B22C0039800D /* Combination Sum III.cpp */; };
		97E24B331B268E8B000AEE2E /* Delete Node which has One Child.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B321B268E8B000AEE2E /* Delete Node which has One Child.cpp */; };
		97E24B351B26B260000AEE2E /* Valid UTF-8.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B341B26B260000AEE2E /* Valid UTF-8.cpp */; };
		97E24B371B26B4DC000AEE2E /* Read 4096 Bytes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B361B26B4DC000AEE2E /* Read 4096 Bytes.cpp */; };
		97E24B391B275572000AEE2E /* Heap Implementation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B381B275572000AEE2E /* Heap Implementation.cpp */; };
		97E24B3B1B2762E2000AEE2E /* K-th Permutation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B3A1B2762E2000AEE2E /* K-th Permutation.cpp */; };
		97E24B3D1B2797A5000AEE2E /* Missing One in Sorted Arr(1-N).cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B3C1B2797A5000AEE2E /* Missing One in Sorted Arr(1-N).cpp */; };
		97E24B3F1B27AAF0000AEE2E /* Swap Back Value based on Position.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B3E1B27AAF0000AEE2E /* Swap Back Value based on Position.cpp */; };
		97E24B411B27DC96000AEE2E /* Parsing Message Format.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B401B27DC96000AEE2E /* Parsing Message Format.cpp */; };
		97E24B431B27FD21000AEE2E /* Nums of Combination of Coins.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B421B27FD21000AEE2E /* Nums of Combination of Coins.cpp */; };
		97E24B451B2CAEA5000AEE2E /* Replace to get Longest Continuous Subarr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B441B2CAEA5000AEE2E /* Replace to get Longest Continuous Subarr.cpp */; };
		97E24B471B2CB9B4000AEE2E /* Lowest Common Ancestor of BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B461B2CB9B4000AEE2E /* Lowest Common Ancestor of BST.cpp */; };
		97E24B491B2CC045000AEE2E /* Distance btw Closet Leaf Node and Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E24B481B2CC045000AEE2E /* Distance btw Closet Leaf Node and Target.cpp */; };
		97E73BC11AD7140F00F69625 /* Median of Two Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97E73BC01AD7140F00F69625 /* Median of Two Arr.cpp */; };
		97EA66341B3A49C300F14235 /* Longest Increasing Subpath in Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EA66331B3A49C300F14235 /* Longest Increasing Subpath in Binary Tree.cpp */; };
		97EA66361B3A5B2A00F14235 /* Shortest List of Integer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EA66351B3A5B2A00F14235 /* Shortest List of Integer.cpp */; };
		97EA66381B3B48FA00F14235 /* Reverse Integer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EA66371B3B48FA00F14235 /* Reverse Integer.cpp */; };
		97EED4441A916AB70094BB6C /* Generate Parentheses .cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EED4431A916AB70094BB6C /* Generate Parentheses .cpp */; };
		97EED4461A91706E0094BB6C /* Combinations Of Coins.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EED4451A91706E0094BB6C /* Combinations Of Coins.cpp */; };
		97EED4481A91B0160094BB6C /* permutation with dup.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EED4471A91B0160094BB6C /* permutation with dup.cpp */; };
		97EED44A1A91BD5F0094BB6C /* Most Frequent Words.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97EED4491A91BD5F0094BB6C /* Most Frequent Words.cpp */; };
		E30EE2CC1D4674DF00FCAFFF /* Triangle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E30EE2CB1D4674DF00FCAFFF /* Triangle.cpp */; };
		E3336FE11CB035FC00728057 /* Most Frequent Nums in Real Time.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FE01CB035FC00728057 /* Most Frequent Nums in Real Time.cpp */; };
		E3336FE51CB0452900728057 /* Lowest Common Ancestor in K nary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FE41CB0452900728057 /* Lowest Common Ancestor in K nary Tree.cpp */; };
		E3336FE71CB04A8800728057 /* Implement MaxStack.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FE61CB04A8700728057 /* Implement MaxStack.cpp */; };
		E3336FF11CB1DBB500728057 /* Trapping Rain Water 1-d Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FF01CB1DBB500728057 /* Trapping Rain Water 1-d Array.cpp */; };
		E3336FF31CB1DCFA00728057 /* Replace Elem with Multip of All Other Elems.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FF21CB1DCFA00728057 /* Replace Elem with Multip of All Other Elems.cpp */; };
		E3336FF51CB1DF9C00728057 /* Largest Rectangle in Histogram.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FF41CB1DF9C00728057 /* Largest Rectangle in Histogram.cpp */; };
		E3336FF71CB1E02200728057 /* Next Taller Person.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FF61CB1E02200728057 /* Next Taller Person.cpp */; };
		E3336FF91CB1E12C00728057 /* Min Num of Replacements to Seperate Elem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FF81CB1E12C00728057 /* Min Num of Replacements to Seperate Elem.cpp */; };
		E3336FFB1CB1E24900728057 /* Is Exist i j k When a[i]<a[j]<a[k].cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FFA1CB1E24900728057 /* Is Exist i j k When a[i]<a[j]<a[k].cpp */; };
		E3336FFE1CB1E28C00728057 /* Num of i j k When a[i]<a[j]<a[k].cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3336FFC1CB1E28C00728057 /* Num of i j k When a[i]<a[j]<a[k].cpp */; };
		E340BCBF1CF750E2002E8A46 /* PreOrder Traverse Graph.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E340BCBE1CF750E2002E8A46 /* PreOrder Traverse Graph.cpp */; };
		E340BCC11CF75B57002E8A46 /* PostOrder Traverse Graph.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E340BCC01CF75B57002E8A46 /* PostOrder Traverse Graph.cpp */; };
		E350ACE81CD586DB00DEE037 /* Graph Valid Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACE71CD586DB00DEE037 /* Graph Valid Tree.cpp */; };
		E350ACEC1CD5B31A00DEE037 /* Find the Celebrity.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACEB1CD5B31A00DEE037 /* Find the Celebrity.cpp */; };
		E350ACEE1CD5C5E300DEE037 /* Influencer Finder.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACED1CD5C5E300DEE037 /* Influencer Finder.cpp */; };
		E350ACF11CD6845700DEE037 /* HB PriorityQueue.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACF01CD6845700DEE037 /* HB PriorityQueue.cpp */; };
		E350ACF31CD6F72200DEE037 /* Find Smallest Range.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACF21CD6F72200DEE037 /* Find Smallest Range.cpp */; };
		E350ACF51CD6F84400DEE037 /* Sort k-diff Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACF41CD6F84400DEE037 /* Sort k-diff Sorted Arr.cpp */; };
		E350ACF71CD6F8C100DEE037 /* Huffman Encoding.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACF61CD6F8C100DEE037 /* Huffman Encoding.cpp */; };
		E350ACF91CD7055900DEE037 /* Cut Wood.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACF81CD7055900DEE037 /* Cut Wood.cpp */; };
		E350ACFB1CD72AAF00DEE037 /* Implement ID Pool.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACFA1CD72AAF00DEE037 /* Implement ID Pool.cpp */; };
		E350AD001CD8041500DEE037 /* Find Insert Position hasDup.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350ACFF1CD8041500DEE037 /* Find Insert Position hasDup.cpp */; };
		E350AD021CD81D4400DEE037 /* First Bad Version.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350AD011CD81D4400DEE037 /* First Bad Version.cpp */; };
		E350AD041CD9BFFC00DEE037 /* Odd Even Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350AD031CD9BFFC00DEE037 /* Odd Even Linked List.cpp */; };
		E350AD091CDABF5D00DEE037 /* Change Node Value in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350AD081CDABF5D00DEE037 /* Change Node Value in BST.cpp */; };
		E350AD0B1CDACD2800DEE037 /* Sum of All Paths.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350AD0A1CDACD2800DEE037 /* Sum of All Paths.cpp */; };
		E350AD0D1CDB1F7F00DEE037 /* Left View of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350AD0C1CDB1F7F00DEE037 /* Left View of Binary Tree.cpp */; };
		E350AD0F1CDB2E5E00DEE037 /* Visible Nodes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E350AD0E1CDB2E5E00DEE037 /* Visible Nodes.cpp */; };
		E37EFF621D47F78500B50582 /* Buy StockIII.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF611D47F78500B50582 /* Buy StockIII.cpp */; };
		E37EFF6A1D4864C300B50582 /* Mininum Path Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF691D4864C300B50582 /* Mininum Path Sum.cpp */; };
		E37EFF6E1D48708800B50582 /* Unique Path Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF6D1D48708800B50582 /* Unique Path Sum.cpp */; };
		E37EFF721D4948B500B50582 /* Unique Paths.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF711D4948B500B50582 /* Unique Paths.cpp */; };
		E37EFF741D4948C400B50582 /* Unique Paths II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF731D4948C400B50582 /* Unique Paths II.cpp */; };
		E37EFF7A1D49757800B50582 /* Merge Intervals.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF791D49757800B50582 /* Merge Intervals.cpp */; };
		E37EFF841D52C3FF00B50582 /* Intersection of Two Arrays.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF831D52C3FF00B50582 /* Intersection of Two Arrays.cpp */; };
		E37EFF861D52C40E00B50582 /* Intersection of Two Arrays II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E37EFF851D52C40E00B50582 /* Intersection of Two Arrays II.cpp */; };
		E3AC0D8D1D3F4B9300CE7A16 /* 4Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3AC0D8C1D3F4B9300CE7A16 /* 4Sum.cpp */; };
		E3B15A021CC86FDF005D0E22 /* Contain Increasing subsequence.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3B15A011CC86FDF005D0E22 /* Contain Increasing subsequence.cpp */; };
		E3B15A041CCBEFD2005D0E22 /* Word Distance.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3B15A031CCBEFD2005D0E22 /* Word Distance.cpp */; };
		E3B15A061CCBF3B7005D0E22 /* Square Root.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3B15A051CCBF3B7005D0E22 /* Square Root.cpp */; };
		E3B46B821CFF661F008D8E99 /* Celebrity Problem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3B46B811CFF661E008D8E99 /* Celebrity Problem.cpp */; };
		E3CDE5E41CBAFC84008C0F71 /* Second Largest Num in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5E31CBAFC84008C0F71 /* Second Largest Num in BST.cpp */; };
		E3CDE5E71CBAFD26008C0F71 /* Two Closest Num to Target.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5E61CBAFD26008C0F71 /* Two Closest Num to Target.cpp */; };
		E3CDE5E91CBAFD58008C0F71 /* 2 Sum in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5E81CBAFD58008C0F71 /* 2 Sum in BST.cpp */; };
		E3CDE5EB1CBAFD98008C0F71 /* Most Frequent Num in BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5EA1CBAFD98008C0F71 /* Most Frequent Num in BST.cpp */; };
		E3CDE5ED1CBAFDBD008C0F71 /* Recover BST if Two Nodes Swapped.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5EC1CBAFDBD008C0F71 /* Recover BST if Two Nodes Swapped.cpp */; };
		E3CDE5EF1CBAFDE8008C0F71 /* Divide BST into Two Seperate BSTs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5EE1CBAFDE8008C0F71 /* Divide BST into Two Seperate BSTs.cpp */; };
		E3CDE5F11CBB0379008C0F71 /* K Closest to Target in Sorted Arr.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5F01CBB0379008C0F71 /* K Closest to Target in Sorted Arr.cpp */; };
		E3CDE5FF1CBCC0EB008C0F71 /* Sum Root To Leaf Numbers.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE5FE1CBCC0EB008C0F71 /* Sum Root To Leaf Numbers.cpp */; };
		E3CDE60D1CBE9470008C0F71 /* Has Sum Root To Leaf.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE60C1CBE9470008C0F71 /* Has Sum Root To Leaf.cpp */; };
		E3CDE60F1CBE948E008C0F71 /* Find Sum Root To Leaf.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE60E1CBE948E008C0F71 /* Find Sum Root To Leaf.cpp */; };
		E3CDE6191CC1428C008C0F71 /* Num of Valid Paretheses.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE6181CC1428C008C0F71 /* Num of Valid Paretheses.cpp */; };
		E3CDE6211CC2AA2A008C0F71 /* Deep Iterator.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE6201CC2AA2A008C0F71 /* Deep Iterator.cpp */; };
		E3CDE6231CC2B850008C0F71 /* Has Triangle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE6221CC2B850008C0F71 /* Has Triangle.cpp */; };
		E3CDE6251CC2B879008C0F71 /* Interval Coverage.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3CDE6241CC2B879008C0F71 /* Interval Coverage.cpp */; };
		E3D583701CE2A1FC00BE4A97 /* Summary Ranges.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3D5836F1CE2A1FC00BE4A97 /* Summary Ranges.cpp */; };
		E3D583721CE2A92D00BE4A97 /* Product of Array Except Self.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3D583711CE2A92D00BE4A97 /* Product of Array Except Self.cpp */; };
		E3D583771CE3E93F00BE4A97 /* Reverse Vowels of a String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3D583761CE3E93F00BE4A97 /* Reverse Vowels of a String.cpp */; };
		E3D583791CE44A2E00BE4A97 /* Word Pattern.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3D583781CE44A2E00BE4A97 /* Word Pattern.cpp */; };
		E3F756861CEBD204000765A8 /* Get Dot Product.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E3F756851CEBD204000765A8 /* Get Dot Product.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		97619D111A58E9B500133E44 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		97080AF21A65BB72007B809D /* Longest Length Product.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Length Product.cpp"; sourceTree = "<group>"; };
		97080AF41A65BC92007B809D /* K-th Smallest Num in Function.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K-th Smallest Num in Function.cpp"; sourceTree = "<group>"; };
		97080AF61A65BD17007B809D /* K-th Closest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K-th Closest.cpp"; sourceTree = "<group>"; };
		97080AF81A65CA5E007B809D /* Shortest Path in Gym.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Shortest Path in Gym.cpp"; sourceTree = "<group>"; };
		97080AFB1A65CACF007B809D /* Sort Integer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort Integer.cpp"; sourceTree = "<group>"; };
		97080AFE1A685F5D007B809D /* K-th Smallest Num in Two Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K-th Smallest Num in Two Sorted Arr.cpp"; sourceTree = "<group>"; };
		97080B001A688C92007B809D /* LRU Cache.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "LRU Cache.cpp"; sourceTree = "<group>"; };
		97080B031A688D3D007B809D /* Str to Hex Int.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Str to Hex Int.cpp"; sourceTree = "<group>"; };
		97080B061A6AFEA5007B809D /* Max Elem in Window.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Elem in Window.cpp"; sourceTree = "<group>"; };
		97080B081A6B1AF4007B809D /* First Non-Repeating Char in Stream.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "First Non-Repeating Char in Stream.cpp"; sourceTree = "<group>"; };
		97080B0A1A6B3798007B809D /* Majority Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Majority Num.cpp"; sourceTree = "<group>"; };
		97080B0E1A6C6B9B007B809D /* Could be Merged by Two Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Could be Merged by Two Arr.cpp"; sourceTree = "<group>"; };
		97080B121A6C702B007B809D /* Reconstruct Bianry Tree With pre_in Order.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reconstruct Bianry Tree With pre_in Order.cpp"; sourceTree = "<group>"; };
		97080B141A6C70E7007B809D /* Reconstruct Binary Tree With post_in Order.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reconstruct Binary Tree With post_in Order.cpp"; sourceTree = "<group>"; };
		97080B161A6C714C007B809D /* Reconstruct Binary Tree With level_in Order.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reconstruct Binary Tree With level_in Order.cpp"; sourceTree = "<group>"; };
		97080B191A6C76C2007B809D /* Most Points on a Line.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Most Points on a Line.cpp"; sourceTree = "<group>"; };
		97080B1B1A6C776A007B809D /* Largest Set of Points with Positive Slope.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Set of Points with Positive Slope.cpp"; sourceTree = "<group>"; };
		97080B1D1A6C77FA007B809D /* Search Suggestion System.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Search Suggestion System.cpp"; sourceTree = "<group>"; };
		97080B1F1A6C78B9007B809D /* Generate Random Maze.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Generate Random Maze.cpp"; sourceTree = "<group>"; };
		97080B211A6C78F7007B809D /* Disjoint White Objects.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Disjoint White Objects.cpp"; sourceTree = "<group>"; };
		97080B231A6DEAFE007B809D /* Reorder Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reorder Linked List.cpp"; sourceTree = "<group>"; };
		97080B251A6EE6EF007B809D /* K-th Smallest Num in Sorted Matrix.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K-th Smallest Num in Sorted Matrix.cpp"; sourceTree = "<group>"; };
		97080B2A1A6EFDA2007B809D /* Top K Frequent Words.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Top K Frequent Words.cpp"; sourceTree = "<group>"; };
		97080B2C1A6F5B6B007B809D /* Encode Space.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Encode Space.cpp"; sourceTree = "<group>"; };
		97080B2E1A6F5BCB007B809D /* Remove Adjacent Repeated Char.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Adjacent Repeated Char.cpp"; sourceTree = "<group>"; };
		97080B301A6F6379007B809D /* Remove Adjacent Repeated CharII.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Adjacent Repeated CharII.cpp"; sourceTree = "<group>"; };
		97080B321A6F6C57007B809D /* Reverse Words in Sentence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Words in Sentence.cpp"; sourceTree = "<group>"; };
		97080B341A6F7C06007B809D /* Remove Dup in Sorted Arr keep one.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Dup in Sorted Arr keep one.cpp"; sourceTree = "<group>"; };
		97080B361A6F7C61007B809D /* Remove Dup in Sorted Arr keep two.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Dup in Sorted Arr keep two.cpp"; sourceTree = "<group>"; };
		97080B381A6F8087007B809D /* Remove Dup in Sorted Arr keep none.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Dup in Sorted Arr keep none.cpp"; sourceTree = "<group>"; };
		97080B3A1A70837B007B809D /* Largest and Smallest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest and Smallest.cpp"; sourceTree = "<group>"; };
		97080B3C1A708D86007B809D /* Largest and Second Largest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest and Second Largest.cpp"; sourceTree = "<group>"; };
		97080B3E1A709296007B809D /* is Substring.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "is Substring.cpp"; sourceTree = "<group>"; };
		97080B401A70AB1B007B809D /* Deduplicate Same Adj Char.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Deduplicate Same Adj Char.cpp"; sourceTree = "<group>"; };
		971C56491A5A2122001E0315 /* remove element.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "remove element.cpp"; sourceTree = "<group>"; };
		971C564B1A5A24E8001E0315 /* Rainbow Sort.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Rainbow Sort.cpp"; sourceTree = "<group>"; };
		971C564E1A5A30BE001E0315 /* Binary Search.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Binary Search.cpp"; sourceTree = "<group>"; };
		971C56501A5A3372001E0315 /* Fibonacci sequence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Fibonacci sequence.cpp"; sourceTree = "<group>"; };
		971C56521A5A3A17001E0315 /* pow.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = pow.cpp; sourceTree = "<group>"; };
		971C56541A5A3E5A001E0315 /* First Occurrence Elem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "First Occurrence Elem.cpp"; sourceTree = "<group>"; };
		971C56561A5A44AD001E0315 /* Last Occurrence Elem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Last Occurrence Elem.cpp"; sourceTree = "<group>"; };
		971C56581A5A4AA0001E0315 /* Closest Elem in Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Closest Elem in Sorted Arr.cpp"; sourceTree = "<group>"; };
		971C565A1A5A4DB5001E0315 /* K Closet Elems in Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K Closet Elems in Sorted Arr.cpp"; sourceTree = "<group>"; };
		971C565C1A5A51A0001E0315 /* unknown size binary search.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "unknown size binary search.cpp"; sourceTree = "<group>"; };
		971C565E1A5B4BD7001E0315 /* Merge Sort Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Sort Linked List.cpp"; sourceTree = "<group>"; };
		971C56641A5B4C2B001E0315 /* search in shifted sorted arr I.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "search in shifted sorted arr I.cpp"; sourceTree = "<group>"; };
		971C56661A5B4C42001E0315 /* search in shifted sorted arr II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "search in shifted sorted arr II.cpp"; sourceTree = "<group>"; };
		971C56681A5B4C50001E0315 /* Min in Rotated Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Min in Rotated Sorted Arr.cpp"; sourceTree = "<group>"; };
		971C566A1A5B4C67001E0315 /* Total Occurrence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Total Occurrence.cpp"; sourceTree = "<group>"; };
		971C566E1A5B5DDB001E0315 /* Deep Copy Skip List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Deep Copy Skip List.cpp"; sourceTree = "<group>"; };
		971C56701A5B6D5B001E0315 /* Copy Linked List with Random Pointer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Copy Linked List with Random Pointer.cpp"; sourceTree = "<group>"; };
		971C56721A5B6FCF001E0315 /* Merge K Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge K Sorted Arr.cpp"; sourceTree = "<group>"; };
		971C56741A5B700D001E0315 /* Merge K Sorted Lists.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge K Sorted Lists.cpp"; sourceTree = "<group>"; };
		971C56761A5B7045001E0315 /* Closest Number in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Closest Number in BST.cpp"; sourceTree = "<group>"; };
		971C56791A5B7093001E0315 /* Largest Number Smaller in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Number Smaller in BST.cpp"; sourceTree = "<group>"; };
		9729597F1A79C99400C8BC04 /* Mid Node of Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Mid Node of Linked List.cpp"; sourceTree = "<group>"; };
		972959811A79C9E600C8BC04 /* Check Cycle and Find Cycle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Check Cycle and Find Cycle.cpp"; sourceTree = "<group>"; };
		972959851A7A164300C8BC04 /* 2D Binary Search.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2D Binary Search.cpp"; sourceTree = "<group>"; };
		972959871A7AEFC000C8BC04 /* Partition Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Partition Linked List.cpp"; sourceTree = "<group>"; };
		972959891A7AF04500C8BC04 /* Queue by Two Stacks.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Queue by Two Stacks.cpp"; sourceTree = "<group>"; };
		9729598B1A7B064100C8BC04 /* K Smallest Num in Unsorted Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K Smallest Num in Unsorted Array.cpp"; sourceTree = "<group>"; };
		973035A41B519F56000DC652 /* Longest subArr have Even 0 1.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest subArr have Even 0 1.cpp"; sourceTree = "<group>"; };
		973035A61B535F9A000DC652 /* Word Search.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Word Search.cpp"; sourceTree = "<group>"; };
		973AA1301AA6B87C00C17790 /* Median Tracker.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Median Tracker.cpp"; sourceTree = "<group>"; };
		97457E021ADCA9D8007A07A6 /* Edit Distance.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Edit Distance.cpp"; sourceTree = "<group>"; };
		97457E041ADF4BB3007A07A6 /* Palindrome Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Palindrome Num.cpp"; sourceTree = "<group>"; };
		97457E061ADF5FF5007A07A6 /* Sort Arr by Frequency.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort Arr by Frequency.cpp"; sourceTree = "<group>"; };
		974D5B7E1A5B70C7009A6D35 /* Deep Copy Undirectd Graph.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Deep Copy Undirectd Graph.cpp"; sourceTree = "<group>"; };
		974D5B821A5BAF07009A6D35 /* Longest Common Subsequence btw two strings.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Common Subsequence btw two strings.cpp"; sourceTree = "<group>"; };
		974D5B841A5BAF2B009A6D35 /* Longest Common Substring btw two strings.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Common Substring btw two strings.cpp"; sourceTree = "<group>"; };
		974D5B861A5C5F3F009A6D35 /* Common Num in Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Common Num in Sorted Arr.cpp"; sourceTree = "<group>"; };
		974D5B891A5C6C7E009A6D35 /* Remove Node in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Node in BST.cpp"; sourceTree = "<group>"; };
		974D5B8B1A5C6C93009A6D35 /* Insert Node in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Insert Node in BST.cpp"; sourceTree = "<group>"; };
		974D5B8D1A5C6D74009A6D35 /* Is Balanced Bianry Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Balanced Bianry Tree.cpp"; sourceTree = "<group>"; };
		974D5B8F1A5C6DC4009A6D35 /* Max Sum Leaf to Leaf.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Sum Leaf to Leaf.cpp"; sourceTree = "<group>"; };
		974D5B911A5C6EF4009A6D35 /* Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Header.h; sourceTree = "<group>"; };
		974D5B931A5CD6C5009A6D35 /* Height of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Height of Binary Tree.cpp"; sourceTree = "<group>"; };
		974D5B951A5CE809009A6D35 /* Decompress String I.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Decompress String I.cpp"; sourceTree = "<group>"; };
		974D5B971A5CE865009A6D35 /* Decompress String II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Decompress String II.cpp"; sourceTree = "<group>"; };
		974D5B991A5CE8D2009A6D35 /* Compress String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Compress String.cpp"; sourceTree = "<group>"; };
		974D5B9B1A5CE963009A6D35 /* String Replace.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "String Replace.cpp"; sourceTree = "<group>"; };
		974D5B9E1A5DF89E009A6D35 /* Find Node with Max Diff Subtree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Node with Max Diff Subtree.cpp"; sourceTree = "<group>"; };
		974D5BA21A5E0A26009A6D35 /* Insert in Sorted Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Insert in Sorted Linked List.cpp"; sourceTree = "<group>"; };
		974D5BA41A5E0C0A009A6D35 /* Merge Two Sorted Linked Lists.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Two Sorted Linked Lists.cpp"; sourceTree = "<group>"; };
		974D5BA71A5E2DF1009A6D35 /* Reverse Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Linked List.cpp"; sourceTree = "<group>"; };
		974D5BA91A5E77A2009A6D35 /* Swap Pair Nodes in Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Swap Pair Nodes in Linked List.cpp"; sourceTree = "<group>"; };
		974D5BAB1A5E823C009A6D35 /* Reverse Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Binary Tree.cpp"; sourceTree = "<group>"; };
		974D5BAD1A60894B009A6D35 /* Keep Nodes Within Range.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Keep Nodes Within Range.cpp"; sourceTree = "<group>"; };
		974D5BB61A611908009A6D35 /* Max Sum Root to Leaf.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Sum Root to Leaf.cpp"; sourceTree = "<group>"; };
		974D5BB81A61DBBB009A6D35 /* Has Sum Any to Any(Root to Leaf).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Has Sum Any to Any(Root to Leaf).cpp"; sourceTree = "<group>"; };
		974D5BBA1A61DD97009A6D35 /* Longest Distance Leaf to Leaf.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Distance Leaf to Leaf.cpp"; sourceTree = "<group>"; };
		97619D131A58E9B500133E44 /* LaiOffer */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = LaiOffer; sourceTree = BUILT_PRODUCTS_DIR; };
		97619D161A58E9B500133E44 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = main.cpp; path = LaiOffer/main.cpp; sourceTree = "<group>"; };
		97619D1E1A58EA0900133E44 /* Selection Sort Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Selection Sort Array.cpp"; sourceTree = "<group>"; };
		97619D201A590B1B00133E44 /* Merge Sort Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Sort Array.cpp"; sourceTree = "<group>"; };
		97619D221A599DFC00133E44 /* Quick Sort Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Quick Sort Array.cpp"; sourceTree = "<group>"; };
		97619D241A5A184F00133E44 /* Move Zero to Right End.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Move Zero to Right End.cpp"; sourceTree = "<group>"; };
		9762EC811ACCCA6C00F95AB6 /* Max Sum Anynode to Anynode.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Sum Anynode to Anynode.cpp"; sourceTree = "<group>"; };
		9765FB611AB29C2900489CC0 /* Fibonacci.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Fibonacci.cpp; sourceTree = "<group>"; };
		9765FB631AB2B9EF00489CC0 /* Longest Increasing Subarray.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Increasing Subarray.cpp"; sourceTree = "<group>"; };
		9765FB651AB2BF6700489CC0 /* Maximal Product When Cutting Rope.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Maximal Product When Cutting Rope.cpp"; sourceTree = "<group>"; };
		9765FB671AB2C08500489CC0 /* Jump Game_jump to end or not.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Jump Game_jump to end or not.cpp"; sourceTree = "<group>"; };
		976D3F1E1AD0E1E00033B750 /* 2D_arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = 2D_arr.cpp; sourceTree = "<group>"; };
		976D3F231AD1CF900033B750 /* 2Sum_rotated_sorted_arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = 2Sum_rotated_sorted_arr.cpp; sourceTree = "<group>"; };
		976D3F251AD1CFC40033B750 /* is_cousin.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = is_cousin.cpp; sourceTree = "<group>"; };
		976D3F271AD212320033B750 /* Isomorphic str.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Isomorphic str.cpp"; sourceTree = "<group>"; };
		976D3F291AD21B8C0033B750 /* shortest_square_in_num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = shortest_square_in_num.cpp; sourceTree = "<group>"; };
		978712B31AE2D66E00957360 /* Q1.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Q1.cpp; sourceTree = "<group>"; };
		978712B51AE2DDA500957360 /* Q2.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Q2.cpp; sourceTree = "<group>"; };
		978712B71AE2E16A00957360 /* Q3.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Q3.cpp; sourceTree = "<group>"; };
		978712B91AE2E53000957360 /* Q4.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Q4.cpp; sourceTree = "<group>"; };
		97895D051B16BE5A00C33E15 /* ID Pool Implementation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "ID Pool Implementation.cpp"; sourceTree = "<group>"; };
		97895D071B17C11E00C33E15 /* Smallest Larger Than Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Smallest Larger Than Target.cpp"; sourceTree = "<group>"; };
		97895D091B17C56000C33E15 /* Largest Smaller Than Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Smaller Than Target.cpp"; sourceTree = "<group>"; };
		97895D0B1B17CD0C00C33E15 /* Find Local Min.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Local Min.cpp"; sourceTree = "<group>"; };
		97895D0D1B17D49E00C33E15 /* Find Max in Sorted Reversed Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Max in Sorted Reversed Arr.cpp"; sourceTree = "<group>"; };
		97895D0F1B17DFD800C33E15 /* Divide.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Divide.cpp; sourceTree = "<group>"; };
		97895D121B19038F00C33E15 /* Num of Values Smaller than Target in Young's Matrix.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Num of Values Smaller than Target in Young's Matrix.cpp"; sourceTree = "<group>"; };
		97895D141B197EC000C33E15 /* First Non-Repeat Char in String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "First Non-Repeat Char in String.cpp"; sourceTree = "<group>"; };
		97895D161B1A228800C33E15 /* Replace to get Longest Continuous Sequence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Replace to get Longest Continuous Sequence.cpp"; sourceTree = "<group>"; };
		97895D181B1A7A6C00C33E15 /* Check Has Triangle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Check Has Triangle.cpp"; sourceTree = "<group>"; };
		97895D1A1B1A883E00C33E15 /* Design BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Design BST.cpp"; sourceTree = "<group>"; };
		97895D1C1B1A89D900C33E15 /* Sort Arr based on Occurrence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort Arr based on Occurrence.cpp"; sourceTree = "<group>"; };
		97895D1E1B1BE4CE00C33E15 /* Find Two Repeating Num(1-N).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Two Repeating Num(1-N).cpp"; sourceTree = "<group>"; };
		97895D201B1BE7C600C33E15 /* First Missing Positive.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "First Missing Positive.cpp"; sourceTree = "<group>"; };
		97895D221B1F9B6D00C33E15 /* Num of Path Sum Root to Leaf.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Num of Path Sum Root to Leaf.cpp"; sourceTree = "<group>"; };
		97895D241B1FAA8C00C33E15 /* Eight Queens.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Eight Queens.cpp"; sourceTree = "<group>"; };
		97895D261B1FCEA500C33E15 /* Arrange to Form Biggest Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Arrange to Form Biggest Num.cpp"; sourceTree = "<group>"; };
		97895D281B1FEEC200C33E15 /* Next Permutation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Next Permutation.cpp"; sourceTree = "<group>"; };
		97895D2B1B20197100C33E15 /* All exist Twice but One Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All exist Twice but One Num.cpp"; sourceTree = "<group>"; };
		97895D2D1B201DFC00C33E15 /* All exist Three times but One Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All exist Three times but One Num.cpp"; sourceTree = "<group>"; };
		97895D2F1B20D66000C33E15 /* Biggest Product of 3 Nums.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Biggest Product of 3 Nums.cpp"; sourceTree = "<group>"; };
		97895D311B20DE5200C33E15 /* 2Sum All Pair Find Value(has dup).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum All Pair Find Value(has dup).cpp"; sourceTree = "<group>"; };
		978AAA3F1A9CD8C200ED046A /* Most Frequent Char in String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Most Frequent Char in String.cpp"; sourceTree = "<group>"; };
		978AAA411A9CDD4500ED046A /* Remove Space in String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Space in String.cpp"; sourceTree = "<group>"; };
		978AAA431A9CE7F700ED046A /* Remove Adjacent Repeated Chars III.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Adjacent Repeated Chars III.cpp"; sourceTree = "<group>"; };
		978AAA451A9CF2AA00ED046A /* 2Sum One Pair Find Index.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum One Pair Find Index.cpp"; sourceTree = "<group>"; };
		978AAA471A9CF61D00ED046A /* 2D Liner Search.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2D Liner Search.cpp"; sourceTree = "<group>"; };
		978AAA4A1A9D8C1900ED046A /* Remove Particular Chars From String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Particular Chars From String.cpp"; sourceTree = "<group>"; };
		978AAA4E1A9E4DCB00ED046A /* Reverse a string.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse a string.cpp"; sourceTree = "<group>"; };
		978AAA501A9E502D00ED046A /* Shift Word.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Shift Word.cpp"; sourceTree = "<group>"; };
		9795378D1B44B375002183CF /* LinkedList.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = LinkedList.h; sourceTree = "<group>"; };
		979537901B44BC74002183CF /* Is Permutation Strings.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Permutation Strings.cpp"; sourceTree = "<group>"; };
		979537921B44C0AB002183CF /* Compress Str.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Compress Str.cpp"; sourceTree = "<group>"; };
		979A936B1AB3A591007DE692 /* Min Number of Jumps.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Min Number of Jumps.cpp"; sourceTree = "<group>"; };
		979A936D1AB3A5D4007DE692 /* Largest Sum of Subarr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Sum of Subarr.cpp"; sourceTree = "<group>"; };
		979A936F1AB3AE75007DE692 /* Longest Increasing Subsequence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Increasing Subsequence.cpp"; sourceTree = "<group>"; };
		979A93711AB3BF1C007DE692 /* Longest Consecutive 1s.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Consecutive 1s.cpp"; sourceTree = "<group>"; };
		979A93731AB3DC81007DE692 /* Largest Square of 1s in Matrix.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Square of 1s in Matrix.cpp"; sourceTree = "<group>"; };
		979A93751AB3E0C8007DE692 /* Largest Cross 1s.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Cross 1s.cpp"; sourceTree = "<group>"; };
		979A93781AB3F3E8007DE692 /* Largest Subsquare Surrounded by 1.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Subsquare Surrounded by 1.cpp"; sourceTree = "<group>"; };
		979A937A1AB3F47D007DE692 /* Largest Sum Submatrix.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Sum Submatrix.cpp"; sourceTree = "<group>"; };
		979A937E1AB41138007DE692 /* Buy StockI.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Buy StockI.cpp"; sourceTree = "<group>"; };
		979A93801AB411A7007DE692 /* Buy StockII.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Buy StockII.cpp"; sourceTree = "<group>"; };
		979A93821AB4FE44007DE692 /* Shuffle Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Shuffle Array.cpp"; sourceTree = "<group>"; };
		979A93841AB507B6007DE692 /* Majority Num II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Majority Num II.cpp"; sourceTree = "<group>"; };
		979A93861AB529D4007DE692 /* Interleave Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Interleave Array.cpp"; sourceTree = "<group>"; };
		979A93881AB53678007DE692 /* k-th Smallest Num with 3.5.7 Factor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = "k-th Smallest Num with 3.5.7 Factor.cpp"; path = "Kth Smallest Num With 3/5/k-th Smallest Num with 3.5.7 Factor.cpp"; sourceTree = "<group>"; };
		97A4F0FB1AEF2F1A00142761 /* Sort by 3 Stacks.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort by 3 Stacks.cpp"; sourceTree = "<group>"; };
		97A4F0FD1AF1997900142761 /* Plus One.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Plus One.cpp"; sourceTree = "<group>"; };
		97A4F0FF1AF1A69B00142761 /* Pascal's Trangle II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Pascal's Trangle II.cpp"; sourceTree = "<group>"; };
		97A4F1011AF1AD3400142761 /* Missing Range.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Missing Range.cpp"; sourceTree = "<group>"; };
		97A4F1031AF1D52D00142761 /* sqrt.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = sqrt.cpp; sourceTree = "<group>"; };
		97A4F1071AF1F55900142761 /* Single Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Single Num.cpp"; sourceTree = "<group>"; };
		97A4F1091AF2ABFD00142761 /* Remove Linked List Elem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Linked List Elem.cpp"; sourceTree = "<group>"; };
		97A4F10B1AF2C97000142761 /* Partition Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Partition Arr.cpp"; sourceTree = "<group>"; };
		97A4F10D1AF2CEDA00142761 /* Interleave Positive Negative Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Interleave Positive Negative Num.cpp"; sourceTree = "<group>"; };
		97A4F1111AF2DFF000142761 /* Intersection Union Diff of Two Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection Union Diff of Two Sorted Arr.cpp"; sourceTree = "<group>"; };
		97A4F1131AF2EB1700142761 /* Find Max in Increase Decrease Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Max in Increase Decrease Arr.cpp"; sourceTree = "<group>"; };
		97A4F1151AF2FAC300142761 /* Remove Nodes by Indices.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Nodes by Indices.cpp"; sourceTree = "<group>"; };
		97A4F1171AF3008500142761 /* Longest Sublist without Dup Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Sublist without Dup Nodes.cpp"; sourceTree = "<group>"; };
		97AD030F1AF6E82D00703834 /* Delete Node in List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Delete Node in List.cpp"; sourceTree = "<group>"; };
		97AD03121AF9B7C700703834 /* Subarr Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Subarr Sum.cpp"; sourceTree = "<group>"; };
		97AF0E461AA7A581003EA180 /* Is Palindrome Linke List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Palindrome Linke List.cpp"; sourceTree = "<group>"; };
		97AF0E481AA7ACC5003EA180 /* Right View of BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Right View of BT.cpp"; sourceTree = "<group>"; };
		97AF0E4E1AA84E88003EA180 /* Find Words Cycle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Words Cycle.cpp"; sourceTree = "<group>"; };
		97AF0E501AAD5946003EA180 /* Singleton.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Singleton.cpp; sourceTree = "<group>"; };
		97B423091B48616000B8F329 /* Num of Possible Triangles.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Num of Possible Triangles.cpp"; sourceTree = "<group>"; };
		97B4230E1B49993A00B8F329 /* Use Arr build Stack.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Use Arr build Stack.cpp"; sourceTree = "<group>"; };
		97B423101B49A64400B8F329 /* Set of Stacks.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Set of Stacks.cpp"; sourceTree = "<group>"; };
		97B423121B49AC1800B8F329 /* Sort One Stack.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort One Stack.cpp"; sourceTree = "<group>"; };
		97B423151B49AFCB00B8F329 /* has Root btw Two Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "has Root btw Two Nodes.cpp"; sourceTree = "<group>"; };
		97B423171B49B58400B8F329 /* Sorted Arr to BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sorted Arr to BST.cpp"; sourceTree = "<group>"; };
		97B423191B49CA4B00B8F329 /* Create LinkedList on Each Level.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Create LinkedList on Each Level.cpp"; sourceTree = "<group>"; };
		97B4231B1B49E7D800B8F329 /* All Paths Sum to Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Paths Sum to Target.cpp"; sourceTree = "<group>"; };
		97B4231D1B4A0F1300B8F329 /* sum of All Digits.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "sum of All Digits.cpp"; sourceTree = "<group>"; };
		97B423201B4A230600B8F329 /* Climb Stairs.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Climb Stairs.cpp"; sourceTree = "<group>"; };
		97B423221B4B24C300B8F329 /* Bubble Sort.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Bubble Sort.cpp"; sourceTree = "<group>"; };
		97B423241B4B693B00B8F329 /* Search with Empty Str.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Search with Empty Str.cpp"; sourceTree = "<group>"; };
		97B423261B4C6F9000B8F329 /* get Rank of Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "get Rank of Num.cpp"; sourceTree = "<group>"; };
		97B423281B4C92C800B8F329 /* print Last K Lines in File.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "print Last K Lines in File.cpp"; sourceTree = "<group>"; };
		97BEF4831A733E7D00FDB6DA /* 2Sum All Pair Find Index.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum All Pair Find Index.cpp"; sourceTree = "<group>"; };
		97BEF4881A7346B200FDB6DA /* shift string.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "shift string.cpp"; sourceTree = "<group>"; };
		97BEF48A1A74665F00FDB6DA /* 2Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = 2Sum.cpp; sourceTree = "<group>"; };
		97BEF48C1A746BDD00FDB6DA /* 2Sum All Pair Find Value(no dup).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum All Pair Find Value(no dup).cpp"; sourceTree = "<group>"; };
		97BEF48E1A74752100FDB6DA /* 2Sum Closest Find Value.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum Closest Find Value.cpp"; sourceTree = "<group>"; };
		97BEF4901A748C8A00FDB6DA /* 3Sum Find Value.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "3Sum Find Value.cpp"; sourceTree = "<group>"; };
		97BEF4921A75AF8900FDB6DA /* Inversion Pair in Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Inversion Pair in Array.cpp"; sourceTree = "<group>"; };
		97BEF4941A75CE5C00FDB6DA /* 2Sum Smaller Find Value.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum Smaller Find Value.cpp"; sourceTree = "<group>"; };
		97C30C431B0FE7D800C2CE98 /* Templates Use.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Templates Use.cpp"; sourceTree = "<group>"; };
		97C30C451B0FF78E00C2CE98 /* Inheritance.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Inheritance.cpp; sourceTree = "<group>"; };
		97C30C471B0FFA5200C2CE98 /* Virtual Function.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Virtual Function.cpp"; sourceTree = "<group>"; };
		97C3FA551ACE07DC00573E43 /* Max Sum Any to Any(Root to Leaf).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Sum Any to Any(Root to Leaf).cpp"; sourceTree = "<group>"; };
		97CA53761AA290460056534F /* Rotate Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Rotate Array.cpp"; sourceTree = "<group>"; };
		97CA53781AA29F0A0056534F /* Merge Two Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Two Sorted Arr.cpp"; sourceTree = "<group>"; };
		97CA537B1AA2A5350056534F /* Find Insert Position NoDup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Insert Position NoDup.cpp"; sourceTree = "<group>"; };
		97CA537D1AA2A7470056534F /* Rotate Image.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Rotate Image.cpp"; sourceTree = "<group>"; };
		97CA53801AA2C9570056534F /* Search for a Range.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Search for a Range.cpp"; sourceTree = "<group>"; };
		97CA53821AA2FB040056534F /* Find Peak Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Peak Num.cpp"; sourceTree = "<group>"; };
		97CA53841AA406DD0056534F /* Set Matrix Zero.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Set Matrix Zero.cpp"; sourceTree = "<group>"; };
		97CA53861AA407410056534F /* Pascal's Trangle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Pascal's Trangle.cpp"; sourceTree = "<group>"; };
		97CA538A1AA40ADF0056534F /* Add Binary.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Add Binary.cpp"; sourceTree = "<group>"; };
		97CA538C1AA40C550056534F /* Compare Version Numbers.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Compare Version Numbers.cpp"; sourceTree = "<group>"; };
		97CA538E1AA40CA00056534F /* Count and Say.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Count and Say.cpp"; sourceTree = "<group>"; };
		97CA53901AA40DC90056534F /* Longest Palindromic Substring.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Palindromic Substring.cpp"; sourceTree = "<group>"; };
		97CA53921AA40E2F0056534F /* Longest Common Prefix.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Common Prefix.cpp"; sourceTree = "<group>"; };
		97CA53941AA40F040056534F /* Valid Palindrome.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Valid Palindrome.cpp"; sourceTree = "<group>"; };
		97CA53961AA40F450056534F /* String to Int.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "String to Int.cpp"; sourceTree = "<group>"; };
		97CA53981AA40FE40056534F /* Valid Parentheses.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Valid Parentheses.cpp"; sourceTree = "<group>"; };
		97CA539A1AA410670056534F /* Length of Last Word.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Length of Last Word.cpp"; sourceTree = "<group>"; };
		97CA539C1AA4109F0056534F /* Group Anagrams.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Group Anagrams.cpp"; sourceTree = "<group>"; };
		97CA539E1AA445370056534F /* Longest Substr Without Repeated Chars.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Substr Without Repeated Chars.cpp"; sourceTree = "<group>"; };
		97CA53A21AA626C60056534F /* Get Left Subtree Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Get Left Subtree Nodes.cpp"; sourceTree = "<group>"; };
		97CA53A41AA62DF20056534F /* String Matching.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "String Matching.cpp"; sourceTree = "<group>"; };
		97CA53A61AA63CAA0056534F /* x^x.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "x^x.cpp"; sourceTree = "<group>"; };
		97CA53A81AA646460056534F /* Spiral Order Traverse I.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Spiral Order Traverse I.cpp"; sourceTree = "<group>"; };
		97CA53AA1AA64A200056534F /* Spiral Order Traverse II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Spiral Order Traverse II.cpp"; sourceTree = "<group>"; };
		97CA53AC1AA64D740056534F /* Spiral Order Generate II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Spiral Order Generate II.cpp"; sourceTree = "<group>"; };
		97CA53AE1AA68D4C0056534F /* Array Deduplication.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Array Deduplication.cpp"; sourceTree = "<group>"; };
		97D02B581AB53B4200C73F56 /* Reconstruct BST with Pre Order Traversal.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reconstruct BST with Pre Order Traversal.cpp"; sourceTree = "<group>"; };
		97D02B5A1AB5411500C73F56 /* Reconstruct Complete Binary Tree From Level Order.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reconstruct Complete Binary Tree From Level Order.cpp"; sourceTree = "<group>"; };
		97D02B5C1AB6587E00C73F56 /* Word Ladder.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Word Ladder.cpp"; sourceTree = "<group>"; };
		97D02B5E1AB66F2B00C73F56 /* 2Sum 2 Arrays.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum 2 Arrays.cpp"; sourceTree = "<group>"; };
		97D02B601AB66FC100C73F56 /* 3Sum 3 Arrays.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "3Sum 3 Arrays.cpp"; sourceTree = "<group>"; };
		97D02B621AB68E9000C73F56 /* Add Two ListsI.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Add Two ListsI.cpp"; sourceTree = "<group>"; };
		97D02B641AB68F1A00C73F56 /* Reverse Part of List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Part of List.cpp"; sourceTree = "<group>"; };
		97D02B661AB68FD700C73F56 /* Remove Dup in Sorted List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Dup in Sorted List.cpp"; sourceTree = "<group>"; };
		97D02B681AB6906100C73F56 /* Remove Dup in Sorted List II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Dup in Sorted List II.cpp"; sourceTree = "<group>"; };
		97D02B6A1AB690D200C73F56 /* Remove Dup in Unsorted List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Dup in Unsorted List.cpp"; sourceTree = "<group>"; };
		97D02B6C1AB6912700C73F56 /* Remove Nth From End of List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Nth From End of List.cpp"; sourceTree = "<group>"; };
		97D02B6E1AB6917E00C73F56 /* Find Nth Node From End of List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Nth Node From End of List.cpp"; sourceTree = "<group>"; };
		97D02B701AB691EE00C73F56 /* Rotate List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Rotate List.cpp"; sourceTree = "<group>"; };
		97D02B721AB6928100C73F56 /* Merge Two Lists Alternatively.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Two Lists Alternatively.cpp"; sourceTree = "<group>"; };
		97D02B741AB6930F00C73F56 /* Intersection of Two Lists.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection of Two Lists.cpp"; sourceTree = "<group>"; };
		97D02B771AB7666900C73F56 /* Merge Overlapping Intervals.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Overlapping Intervals.cpp"; sourceTree = "<group>"; };
		97D02B791AB766FE00C73F56 /* Pattern Matche.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Pattern Matche.cpp"; sourceTree = "<group>"; };
		97D02B7B1AB7677D00C73F56 /* Largest Val from Arr of Nums in String type.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Val from Arr of Nums in String type.cpp"; sourceTree = "<group>"; };
		97D02B7D1AB767AF00C73F56 /* Top View of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Top View of Binary Tree.cpp"; sourceTree = "<group>"; };
		97D02B7F1AB7682700C73F56 /* Divide Set into Two Subset with Min diff of Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Divide Set into Two Subset with Min diff of Sum.cpp"; sourceTree = "<group>"; };
		97D02B811AB7687A00C73F56 /* Transform a BST to Greater Sum Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Transform a BST to Greater Sum Tree.cpp"; sourceTree = "<group>"; };
		97D02B831AB768D900C73F56 /* Connect Right NULL Child to inorder Successor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Connect Right NULL Child to inorder Successor.cpp"; sourceTree = "<group>"; };
		97D02B851AB7698B00C73F56 /* Count Num of Words in String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Count Num of Words in String.cpp"; sourceTree = "<group>"; };
		97D02B871AB769D400C73F56 /* Reconstruct BST from PreOrder.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reconstruct BST from PreOrder.cpp"; sourceTree = "<group>"; };
		97D02B891AB76A6000C73F56 /* Insert Least Num of Char to make String Palindrome.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Insert Least Num of Char to make String Palindrome.cpp"; sourceTree = "<group>"; };
		97D02B8B1AB76B5E00C73F56 /* All Subsequence From String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Subsequence From String.cpp"; sourceTree = "<group>"; };
		97D02B8D1AB76BA800C73F56 /* All Combination of Factor could Multiply to Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Combination of Factor could Multiply to Target.cpp"; sourceTree = "<group>"; };
		97D02B8F1AB76C5E00C73F56 /* Find Order of Chars in Dic.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Order of Chars in Dic.cpp"; sourceTree = "<group>"; };
		97D02B911AB76CF300C73F56 /* Get Count of Right Smaller Nums.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Get Count of Right Smaller Nums.cpp"; sourceTree = "<group>"; };
		97D02B931AB76D3400C73F56 /* Find Only One Dup Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Only One Dup Num.cpp"; sourceTree = "<group>"; };
		97D02B951AB76D9D00C73F56 /* Two Nums with Same Diff to Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Two Nums with Same Diff to Target.cpp"; sourceTree = "<group>"; };
		97D02B971AB76EB100C73F56 /* Bottom View of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Bottom View of Binary Tree.cpp"; sourceTree = "<group>"; };
		97D02B991AB76F4D00C73F56 /* Wether Edges could Form a Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Wether Edges could Form a Tree.cpp"; sourceTree = "<group>"; };
		97D02B9B1AB76F7800C73F56 /* Max Product Subarr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Product Subarr.cpp"; sourceTree = "<group>"; };
		97D02B9D1AB76FAF00C73F56 /* Matrix Water.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Matrix Water.cpp"; sourceTree = "<group>"; };
		97D02B9F1AB76FE400C73F56 /* Find Lowest Node in Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Lowest Node in Binary Tree.cpp"; sourceTree = "<group>"; };
		97D02BA11AB7700A00C73F56 /* Count Nodes in Given Range in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Count Nodes in Given Range in BST.cpp"; sourceTree = "<group>"; };
		97D02BA31AB7703B00C73F56 /* Longest Bitonic Subsequence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Bitonic Subsequence.cpp"; sourceTree = "<group>"; };
		97D02BA51AB7708F00C73F56 /* Is PostOrder of BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is PostOrder of BST.cpp"; sourceTree = "<group>"; };
		97D02BA71AB7712400C73F56 /* Smallest Window in Str Contain all Char of another Str.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Smallest Window in Str Contain all Char of another Str.cpp"; sourceTree = "<group>"; };
		97D02BA91AB7719200C73F56 /* Has Subarr Sums to Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Has Subarr Sums to Target.cpp"; sourceTree = "<group>"; };
		97D02BAD1AB7721D00C73F56 /* All Combination of K Elem in Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Combination of K Elem in Arr.cpp"; sourceTree = "<group>"; };
		97D02BAF1AB7729B00C73F56 /* Positive Negative Alternatively.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Positive Negative Alternatively.cpp"; sourceTree = "<group>"; };
		97D02BB11AB772D400C73F56 /* Get PostOrder from InOrder and Preorder from BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Get PostOrder from InOrder and Preorder from BT.cpp"; sourceTree = "<group>"; };
		97D02BB31AB7730600C73F56 /* Convert BT to DLL.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Convert BT to DLL.cpp"; sourceTree = "<group>"; };
		97D02BB51AB7733500C73F56 /* Find Distance Between Two Nodes in BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Distance Between Two Nodes in BT.cpp"; sourceTree = "<group>"; };
		97D02BB71AB7738900C73F56 /* Str Chained Form a Circle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Str Chained Form a Circle.cpp"; sourceTree = "<group>"; };
		97D02BB91AB773B500C73F56 /* Is palindrom List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is palindrom List.cpp"; sourceTree = "<group>"; };
		97D02BBB1AB773F600C73F56 /* All Paths Sum to Target in BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Paths Sum to Target in BT.cpp"; sourceTree = "<group>"; };
		97D02BBD1AB7745800C73F56 /* Is Subtree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Subtree.cpp"; sourceTree = "<group>"; };
		97D02BBF1AB774C600C73F56 /* Nested Int Weighted Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Nested Int Weighted Sum.cpp"; sourceTree = "<group>"; };
		97D02BC11AB7754F00C73F56 /* Is Cousins in BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Cousins in BT.cpp"; sourceTree = "<group>"; };
		97D02BC31AB775AA00C73F56 /* Reverse Alternate Nodes in List and Append at End.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Alternate Nodes in List and Append at End.cpp"; sourceTree = "<group>"; };
		97D02BC51AB7762600C73F56 /* Is in Sorted 2D Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is in Sorted 2D Arr.cpp"; sourceTree = "<group>"; };
		97D02BC71AB7766100C73F56 /* Common Elem in 2D Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Common Elem in 2D Sorted Arr.cpp"; sourceTree = "<group>"; };
		97D02BC91AB776F600C73F56 /* Diagonal Sum of BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Diagonal Sum of BT.cpp"; sourceTree = "<group>"; };
		97D02BCB1AB7773000C73F56 /* Delete Node with Cost larger than K.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Delete Node with Cost larger than K.cpp"; sourceTree = "<group>"; };
		97D02BCD1AB7776D00C73F56 /* Closet K Points to Origin.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Closet K Points to Origin.cpp"; sourceTree = "<group>"; };
		97D02BCF1AB777F200C73F56 /* All Permutation of Str after insert Empty Space.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Permutation of Str after insert Empty Space.cpp"; sourceTree = "<group>"; };
		97D02BD11AB7782500C73F56 /* 3Sum Less.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "3Sum Less.cpp"; sourceTree = "<group>"; };
		97D303D71A7C42F800D60E6C /* K-th Smallest Sum in Two Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K-th Smallest Sum in Two Sorted Arr.cpp"; sourceTree = "<group>"; };
		97D303D91A7CA7B600D60E6C /* Common Num in Unsorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Common Num in Unsorted Arr.cpp"; sourceTree = "<group>"; };
		97D303DB1A7DC0A100D60E6C /* All Unique Chars.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Unique Chars.cpp"; sourceTree = "<group>"; };
		97D303DF1A81995B00D60E6C /* ZigZag Traverse Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "ZigZag Traverse Binary Tree.cpp"; sourceTree = "<group>"; };
		97D303E11A819E2D00D60E6C /* Level Order Traverse Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Level Order Traverse Binary Tree.cpp"; sourceTree = "<group>"; };
		97D303E31A81A30900D60E6C /* Lowest Common Ancestor of BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Lowest Common Ancestor of BT.cpp"; sourceTree = "<group>"; };
		97D303E51A81A6F100D60E6C /* Lowest Common Ancestor has Parent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Lowest Common Ancestor has Parent.cpp"; sourceTree = "<group>"; };
		97D303E71A81BB5D00D60E6C /* Lowest Common Ancestor of K Nodes in BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Lowest Common Ancestor of K Nodes in BT.cpp"; sourceTree = "<group>"; };
		97D303E91A81BE6500D60E6C /* Lowest Common Ancestor IV.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Lowest Common Ancestor IV.cpp"; sourceTree = "<group>"; };
		97D303EB1A81D4AF00D60E6C /* Spiral Order Generate I.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Spiral Order Generate I.cpp"; sourceTree = "<group>"; };
		97D303ED1A81EBF200D60E6C /* Sort String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort String.cpp"; sourceTree = "<group>"; };
		97D303EF1A82D6D000D60E6C /* Smallest Num Larger in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Smallest Num Larger in BST.cpp"; sourceTree = "<group>"; };
		97D303F11A82DED300D60E6C /* Search Node in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Search Node in BST.cpp"; sourceTree = "<group>"; };
		97D303F41A8317B900D60E6C /* Pre-order traverse.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Pre-order traverse.cpp"; sourceTree = "<group>"; };
		97D303F61A83189700D60E6C /* In-order traverse.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "In-order traverse.cpp"; sourceTree = "<group>"; };
		97D303F81A8318A600D60E6C /* Post-order traverse.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Post-order traverse.cpp"; sourceTree = "<group>"; };
		97D303FB1A83557600D60E6C /* Symmetric Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Symmetric Binary Tree.cpp"; sourceTree = "<group>"; };
		97D303FD1A83565C00D60E6C /* Same Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Same Binary Tree.cpp"; sourceTree = "<group>"; };
		97D303FF1A8357A800D60E6C /* is BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "is BST.cpp"; sourceTree = "<group>"; };
		97D304011A83582C00D60E6C /* Tweaked Identical Binary Trees.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Tweaked Identical Binary Trees.cpp"; sourceTree = "<group>"; };
		97D304041A86AA7600D60E6C /* Stack with Min().cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Stack with Min().cpp"; sourceTree = "<group>"; };
		97D304061A86AB8D00D60E6C /* Sort With 3 Stacks.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort With 3 Stacks.cpp"; sourceTree = "<group>"; };
		97D30D5B1A88105B00FAC61A /* Evaluate Reverse Polish Notation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Evaluate Reverse Polish Notation.cpp"; sourceTree = "<group>"; };
		97D30D5D1A88426000FAC61A /* Missing One in Unsorted Arr(1-N).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Missing One in Unsorted Arr(1-N).cpp"; sourceTree = "<group>"; };
		97D30D5F1A89608B00FAC61A /* 3Sum Closest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "3Sum Closest.cpp"; sourceTree = "<group>"; };
		97D30D611A8960F300FAC61A /* Print Matrix Clockwise.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Print Matrix Clockwise.cpp"; sourceTree = "<group>"; };
		97D30D631A8FA9B200FAC61A /* subset no dup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "subset no dup.cpp"; sourceTree = "<group>"; };
		97D30D651A8FCE1400FAC61A /* permutation no dup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "permutation no dup.cpp"; sourceTree = "<group>"; };
		97D30D671A9040E600FAC61A /* subset has dup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "subset has dup.cpp"; sourceTree = "<group>"; };
		97D320BF1B55C947005A3C2B /* Hash Table.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Hash Table.cpp"; sourceTree = "<group>"; };
		97D320C11B56C5FF005A3C2B /* Insertion Sort Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Insertion Sort Linked List.cpp"; sourceTree = "<group>"; };
		97D6AC4D1AD453F4007F28C7 /* Linked List Cycle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Linked List Cycle.cpp"; sourceTree = "<group>"; };
		97D6AC4F1AD454DD007F28C7 /* Intersection in Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection in Linked List.cpp"; sourceTree = "<group>"; };
		97D6AC511AD45EBC007F28C7 /* Convert Sorted Arr to BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Convert Sorted Arr to BST.cpp"; sourceTree = "<group>"; };
		97D6AC531AD45FB4007F28C7 /* Design Text Editor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Design Text Editor.cpp"; sourceTree = "<group>"; };
		97D6AC551AD45FF4007F28C7 /* Longest Path in BT.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Path in BT.cpp"; sourceTree = "<group>"; };
		97D6AC571AD4E2AA007F28C7 /* Quick Sort Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Quick Sort Linked List.cpp"; sourceTree = "<group>"; };
		97D6AC591AD4E331007F28C7 /* Selection Sort Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Selection Sort Linked List.cpp"; sourceTree = "<group>"; };
		97D6AC5D1AD5A10F007F28C7 /* Max Heap.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Max Heap.cpp"; sourceTree = "<group>"; };
		97D6AC5E1AD5A10F007F28C7 /* Max Heap.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "Max Heap.h"; sourceTree = "<group>"; };
		97D6AC621AD5C24C007F28C7 /* Is Completed Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Completed Binary Tree.cpp"; sourceTree = "<group>"; };
		97D6AC641AD61DE9007F28C7 /* Hex for Int.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Hex for Int.cpp"; sourceTree = "<group>"; };
		97D74FCA1AF331C400EE657D /* word play.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "word play.cpp"; sourceTree = "<group>"; };
		97D74FCC1AF3D7FA00EE657D /* Mine.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Mine.cpp; sourceTree = "<group>"; };
		97D74FCE1AF3DF7F00EE657D /* STRING.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = STRING.cpp; sourceTree = "<group>"; };
		97D74FD01AF3FD7C00EE657D /* first non repeat stream.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "first non repeat stream.cpp"; sourceTree = "<group>"; };
		97D74FD21AF47CF400EE657D /* Swap Two Nodes in List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Swap Two Nodes in List.cpp"; sourceTree = "<group>"; };
		97D74FD41AF55D1C00EE657D /* Distance btw Two Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Distance btw Two Nodes.cpp"; sourceTree = "<group>"; };
		97D74FD61AF563CA00EE657D /* Subset Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Subset Sum.cpp"; sourceTree = "<group>"; };
		97D967771AFDB48900C152EA /* Print All Valid Parentheses.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Print All Valid Parentheses.cpp"; sourceTree = "<group>"; };
		97D9677A1B00122400C152EA /* Common Elem in 3 Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Common Elem in 3 Sorted Arr.cpp"; sourceTree = "<group>"; };
		97DEC4B21B2DF7A100238313 /* Get Max Product Without One Num.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Get Max Product Without One Num.cpp"; sourceTree = "<group>"; };
		97DEC4BF1B2E336900238313 /* Print List Reverse Order.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Print List Reverse Order.cpp"; sourceTree = "<group>"; };
		97DEC4C11B2E3AED00238313 /* Reverse Double Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Double Linked List.cpp"; sourceTree = "<group>"; };
		97DEC4C41B2E403B00238313 /* Reverse Circular List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Circular List.cpp"; sourceTree = "<group>"; };
		97DEC4CC1B2E605500238313 /* Add Two ListsII.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Add Two ListsII.cpp"; sourceTree = "<group>"; };
		97DFBE281B2FD12E0039800D /* Remove Nodes Outside of Range.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Nodes Outside of Range.cpp"; sourceTree = "<group>"; };
		97DFBE2A1B2FD5CA0039800D /* Remove Trailing Zero Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Trailing Zero Nodes.cpp"; sourceTree = "<group>"; };
		97DFBE2C1B2FD9A20039800D /* Heapify Complete Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Heapify Complete Binary Tree.cpp"; sourceTree = "<group>"; };
		97DFBE321B31DB7E0039800D /* All Visible Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "All Visible Nodes.cpp"; sourceTree = "<group>"; };
		97DFBE341B31DE030039800D /* In-order Successor Node.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "In-order Successor Node.cpp"; sourceTree = "<group>"; };
		97DFBE361B31DF9F0039800D /* kth Smallest in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "kth Smallest in BST.cpp"; sourceTree = "<group>"; };
		97DFBE441B3246040039800D /* Sort Letter by Case.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort Letter by Case.cpp"; sourceTree = "<group>"; };
		97DFBE4B1B3259180039800D /* Quick Select Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Quick Select Arr.cpp"; sourceTree = "<group>"; };
		97DFBE531B3322680039800D /* 2Sum One pair Find Index Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum One pair Find Index Sorted Arr.cpp"; sourceTree = "<group>"; };
		97DFBE551B332D800039800D /* find k-th Smallest Element in Unsorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "find k-th Smallest Element in Unsorted Arr.cpp"; sourceTree = "<group>"; };
		97DFBE571B332D9B0039800D /* find k-th Largest Element in Unsorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "find k-th Largest Element in Unsorted Arr.cpp"; sourceTree = "<group>"; };
		97DFBE5B1B3335280039800D /* Invert Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Invert Binary Tree.cpp"; sourceTree = "<group>"; };
		97DFBE5D1B333A650039800D /* Contains Duplicate.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Contains Duplicate.cpp"; sourceTree = "<group>"; };
		97DFBE5F1B333E250039800D /* Contains Duplicate II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Contains Duplicate II.cpp"; sourceTree = "<group>"; };
		97DFBE611B334B2B0039800D /* Contains Duplicate III.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Contains Duplicate III.cpp"; sourceTree = "<group>"; };
		97DFBE631B334E160039800D /* House Robber.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "House Robber.cpp"; sourceTree = "<group>"; };
		97DFBE651B33624F0039800D /* 2Sum Data Structure Design.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2Sum Data Structure Design.cpp"; sourceTree = "<group>"; };
		97DFBE671B339DDE0039800D /* Largest Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Number.cpp"; sourceTree = "<group>"; };
		97DFBE691B33A5740039800D /* Binary Search Tree Iterator.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Binary Search Tree Iterator.cpp"; sourceTree = "<group>"; };
		97DFBE6B1B349D2B0039800D /* Implement Trie (Prefix Tree).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Implement Trie (Prefix Tree).cpp"; sourceTree = "<group>"; };
		97DFBE6D1B34B43E0039800D /* Letter Combinations of a Phone Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Letter Combinations of a Phone Number.cpp"; sourceTree = "<group>"; };
		97DFBE6F1B34CA210039800D /* Count Complete Tree Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Count Complete Tree Nodes.cpp"; sourceTree = "<group>"; };
		97DFBE711B34D7B40039800D /* One Edit Distance.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "One Edit Distance.cpp"; sourceTree = "<group>"; };
		97DFBE731B34E87D0039800D /* Min Size Subarray Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Min Size Subarray Sum.cpp"; sourceTree = "<group>"; };
		97DFBE751B35157E0039800D /* Insert Interval.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Insert Interval.cpp"; sourceTree = "<group>"; };
		97DFBE771B3614AB0039800D /* Permutations.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Permutations.cpp; sourceTree = "<group>"; };
		97DFBE791B361E0A0039800D /* Border View of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Border View of Binary Tree.cpp"; sourceTree = "<group>"; };
		97DFBE7B1B3628920039800D /* k Closest to Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "k Closest to Target.cpp"; sourceTree = "<group>"; };
		97DFBE7D1B36396D0039800D /* Roman to Integer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Roman to Integer.cpp"; sourceTree = "<group>"; };
		97DFBE7F1B378F2E0039800D /* Combination Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Combination Sum.cpp"; sourceTree = "<group>"; };
		97DFBE811B37BE870039800D /* Combination Sum II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Combination Sum II.cpp"; sourceTree = "<group>"; };
		97DFBE831B38AA540039800D /* Combinations.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Combinations.cpp; sourceTree = "<group>"; };
		97DFBE851B38B22C0039800D /* Combination Sum III.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Combination Sum III.cpp"; sourceTree = "<group>"; };
		97E24B321B268E8B000AEE2E /* Delete Node which has One Child.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Delete Node which has One Child.cpp"; sourceTree = "<group>"; };
		97E24B341B26B260000AEE2E /* Valid UTF-8.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Valid UTF-8.cpp"; sourceTree = "<group>"; };
		97E24B361B26B4DC000AEE2E /* Read 4096 Bytes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Read 4096 Bytes.cpp"; sourceTree = "<group>"; };
		97E24B381B275572000AEE2E /* Heap Implementation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Heap Implementation.cpp"; sourceTree = "<group>"; };
		97E24B3A1B2762E2000AEE2E /* K-th Permutation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K-th Permutation.cpp"; sourceTree = "<group>"; };
		97E24B3C1B2797A5000AEE2E /* Missing One in Sorted Arr(1-N).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Missing One in Sorted Arr(1-N).cpp"; sourceTree = "<group>"; };
		97E24B3E1B27AAF0000AEE2E /* Swap Back Value based on Position.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Swap Back Value based on Position.cpp"; sourceTree = "<group>"; };
		97E24B401B27DC96000AEE2E /* Parsing Message Format.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Parsing Message Format.cpp"; sourceTree = "<group>"; };
		97E24B421B27FD21000AEE2E /* Nums of Combination of Coins.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Nums of Combination of Coins.cpp"; sourceTree = "<group>"; };
		97E24B441B2CAEA5000AEE2E /* Replace to get Longest Continuous Subarr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Replace to get Longest Continuous Subarr.cpp"; sourceTree = "<group>"; };
		97E24B461B2CB9B4000AEE2E /* Lowest Common Ancestor of BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Lowest Common Ancestor of BST.cpp"; sourceTree = "<group>"; };
		97E24B481B2CC045000AEE2E /* Distance btw Closet Leaf Node and Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Distance btw Closet Leaf Node and Target.cpp"; sourceTree = "<group>"; };
		97E73BC01AD7140F00F69625 /* Median of Two Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Median of Two Arr.cpp"; sourceTree = "<group>"; };
		97EA66331B3A49C300F14235 /* Longest Increasing Subpath in Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Increasing Subpath in Binary Tree.cpp"; sourceTree = "<group>"; };
		97EA66351B3A5B2A00F14235 /* Shortest List of Integer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Shortest List of Integer.cpp"; sourceTree = "<group>"; };
		97EA66371B3B48FA00F14235 /* Reverse Integer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Integer.cpp"; sourceTree = "<group>"; };
		97EED4431A916AB70094BB6C /* Generate Parentheses .cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Generate Parentheses .cpp"; sourceTree = "<group>"; };
		97EED4451A91706E0094BB6C /* Combinations Of Coins.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Combinations Of Coins.cpp"; sourceTree = "<group>"; };
		97EED4471A91B0160094BB6C /* permutation with dup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "permutation with dup.cpp"; sourceTree = "<group>"; };
		97EED4491A91BD5F0094BB6C /* Most Frequent Words.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Most Frequent Words.cpp"; sourceTree = "<group>"; };
		97EED44F1A9A919E0094BB6C /* BinaryTree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = BinaryTree.h; sourceTree = "<group>"; };
		E30EE2CB1D4674DF00FCAFFF /* Triangle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Triangle.cpp; sourceTree = "<group>"; };
		E3336FE01CB035FC00728057 /* Most Frequent Nums in Real Time.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Most Frequent Nums in Real Time.cpp"; sourceTree = "<group>"; };
		E3336FE41CB0452900728057 /* Lowest Common Ancestor in K nary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Lowest Common Ancestor in K nary Tree.cpp"; sourceTree = "<group>"; };
		E3336FE61CB04A8700728057 /* Implement MaxStack.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Implement MaxStack.cpp"; sourceTree = "<group>"; };
		E3336FEF1CB1DB0600728057 /* File */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = File; sourceTree = "<group>"; };
		E3336FF01CB1DBB500728057 /* Trapping Rain Water 1-d Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Trapping Rain Water 1-d Array.cpp"; sourceTree = "<group>"; };
		E3336FF21CB1DCFA00728057 /* Replace Elem with Multip of All Other Elems.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Replace Elem with Multip of All Other Elems.cpp"; sourceTree = "<group>"; };
		E3336FF41CB1DF9C00728057 /* Largest Rectangle in Histogram.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Largest Rectangle in Histogram.cpp"; sourceTree = "<group>"; };
		E3336FF61CB1E02200728057 /* Next Taller Person.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Next Taller Person.cpp"; sourceTree = "<group>"; };
		E3336FF81CB1E12C00728057 /* Min Num of Replacements to Seperate Elem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Min Num of Replacements to Seperate Elem.cpp"; sourceTree = "<group>"; };
		E3336FFA1CB1E24900728057 /* Is Exist i j k When a[i]<a[j]<a[k].cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Is Exist i j k When a[i]<a[j]<a[k].cpp"; sourceTree = "<group>"; };
		E3336FFC1CB1E28C00728057 /* Num of i j k When a[i]<a[j]<a[k].cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Num of i j k When a[i]<a[j]<a[k].cpp"; sourceTree = "<group>"; };
		E340BCBD1CF572A7002E8A46 /* Graph Basic */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "Graph Basic"; sourceTree = "<group>"; };
		E340BCBE1CF750E2002E8A46 /* PreOrder Traverse Graph.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "PreOrder Traverse Graph.cpp"; sourceTree = "<group>"; };
		E340BCC01CF75B57002E8A46 /* PostOrder Traverse Graph.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "PostOrder Traverse Graph.cpp"; sourceTree = "<group>"; };
		E350ACE71CD586DB00DEE037 /* Graph Valid Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Graph Valid Tree.cpp"; sourceTree = "<group>"; };
		E350ACEB1CD5B31A00DEE037 /* Find the Celebrity.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find the Celebrity.cpp"; sourceTree = "<group>"; };
		E350ACED1CD5C5E300DEE037 /* Influencer Finder.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Influencer Finder.cpp"; sourceTree = "<group>"; };
		E350ACF01CD6845700DEE037 /* HB PriorityQueue.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "HB PriorityQueue.cpp"; sourceTree = "<group>"; };
		E350ACF21CD6F72200DEE037 /* Find Smallest Range.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Smallest Range.cpp"; sourceTree = "<group>"; };
		E350ACF41CD6F84400DEE037 /* Sort k-diff Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort k-diff Sorted Arr.cpp"; sourceTree = "<group>"; };
		E350ACF61CD6F8C100DEE037 /* Huffman Encoding.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Huffman Encoding.cpp"; sourceTree = "<group>"; };
		E350ACF81CD7055900DEE037 /* Cut Wood.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Cut Wood.cpp"; sourceTree = "<group>"; };
		E350ACFA1CD72AAF00DEE037 /* Implement ID Pool.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Implement ID Pool.cpp"; sourceTree = "<group>"; };
		E350ACFC1CD72AE100DEE037 /* Hybrid Data Structure */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "Hybrid Data Structure"; sourceTree = "<group>"; };
		E350ACFD1CD72CF600DEE037 /* Priority Queue */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "Priority Queue"; sourceTree = "<group>"; };
		E350ACFE1CD7F63D00DEE037 /* Binary Search */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "Binary Search"; sourceTree = "<group>"; };
		E350ACFF1CD8041500DEE037 /* Find Insert Position hasDup.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Insert Position hasDup.cpp"; sourceTree = "<group>"; };
		E350AD011CD81D4400DEE037 /* First Bad Version.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "First Bad Version.cpp"; sourceTree = "<group>"; };
		E350AD031CD9BFFC00DEE037 /* Odd Even Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Odd Even Linked List.cpp"; sourceTree = "<group>"; };
		E350AD071CDA7CA000DEE037 /* Binary Tree */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "Binary Tree"; sourceTree = "<group>"; };
		E350AD081CDABF5D00DEE037 /* Change Node Value in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Change Node Value in BST.cpp"; sourceTree = "<group>"; };
		E350AD0A1CDACD2800DEE037 /* Sum of All Paths.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sum of All Paths.cpp"; sourceTree = "<group>"; };
		E350AD0C1CDB1F7F00DEE037 /* Left View of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Left View of Binary Tree.cpp"; sourceTree = "<group>"; };
		E350AD0E1CDB2E5E00DEE037 /* Visible Nodes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Visible Nodes.cpp"; sourceTree = "<group>"; };
		E37EFF611D47F78500B50582 /* Buy StockIII.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Buy StockIII.cpp"; sourceTree = "<group>"; };
		E37EFF691D4864C300B50582 /* Mininum Path Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Mininum Path Sum.cpp"; sourceTree = "<group>"; };
		E37EFF6D1D48708800B50582 /* Unique Path Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Unique Path Sum.cpp"; sourceTree = "<group>"; };
		E37EFF711D4948B500B50582 /* Unique Paths.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Unique Paths.cpp"; sourceTree = "<group>"; };
		E37EFF731D4948C400B50582 /* Unique Paths II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Unique Paths II.cpp"; sourceTree = "<group>"; };
		E37EFF791D49757800B50582 /* Merge Intervals.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Intervals.cpp"; sourceTree = "<group>"; };
		E37EFF831D52C3FF00B50582 /* Intersection of Two Arrays.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection of Two Arrays.cpp"; sourceTree = "<group>"; };
		E37EFF851D52C40E00B50582 /* Intersection of Two Arrays II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection of Two Arrays II.cpp"; sourceTree = "<group>"; };
		E3AC0D851D3E81C200CE7A16 /* JJ1 */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; name = JJ1; path = LaiOffer/JJ1; sourceTree = "<group>"; };
		E3AC0D8C1D3F4B9300CE7A16 /* 4Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = 4Sum.cpp; sourceTree = "<group>"; };
		E3B15A011CC86FDF005D0E22 /* Contain Increasing subsequence.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Contain Increasing subsequence.cpp"; sourceTree = "<group>"; };
		E3B15A031CCBEFD2005D0E22 /* Word Distance.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Word Distance.cpp"; sourceTree = "<group>"; };
		E3B15A051CCBF3B7005D0E22 /* Square Root.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Square Root.cpp"; sourceTree = "<group>"; };
		E3B46B811CFF661E008D8E99 /* Celebrity Problem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Celebrity Problem.cpp"; sourceTree = "<group>"; };
		E3CDE5E31CBAFC84008C0F71 /* Second Largest Num in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Second Largest Num in BST.cpp"; sourceTree = "<group>"; };
		E3CDE5E61CBAFD26008C0F71 /* Two Closest Num to Target.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Two Closest Num to Target.cpp"; sourceTree = "<group>"; };
		E3CDE5E81CBAFD58008C0F71 /* 2 Sum in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2 Sum in BST.cpp"; sourceTree = "<group>"; };
		E3CDE5EA1CBAFD98008C0F71 /* Most Frequent Num in BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Most Frequent Num in BST.cpp"; sourceTree = "<group>"; };
		E3CDE5EC1CBAFDBD008C0F71 /* Recover BST if Two Nodes Swapped.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Recover BST if Two Nodes Swapped.cpp"; sourceTree = "<group>"; };
		E3CDE5EE1CBAFDE8008C0F71 /* Divide BST into Two Seperate BSTs.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Divide BST into Two Seperate BSTs.cpp"; sourceTree = "<group>"; };
		E3CDE5F01CBB0379008C0F71 /* K Closest to Target in Sorted Arr.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "K Closest to Target in Sorted Arr.cpp"; sourceTree = "<group>"; };
		E3CDE5FE1CBCC0EB008C0F71 /* Sum Root To Leaf Numbers.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sum Root To Leaf Numbers.cpp"; sourceTree = "<group>"; };
		E3CDE60C1CBE9470008C0F71 /* Has Sum Root To Leaf.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Has Sum Root To Leaf.cpp"; sourceTree = "<group>"; };
		E3CDE60E1CBE948E008C0F71 /* Find Sum Root To Leaf.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find Sum Root To Leaf.cpp"; sourceTree = "<group>"; };
		E3CDE6181CC1428C008C0F71 /* Num of Valid Paretheses.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Num of Valid Paretheses.cpp"; sourceTree = "<group>"; };
		E3CDE6201CC2AA2A008C0F71 /* Deep Iterator.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Deep Iterator.cpp"; sourceTree = "<group>"; };
		E3CDE6221CC2B850008C0F71 /* Has Triangle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Has Triangle.cpp"; sourceTree = "<group>"; };
		E3CDE6241CC2B879008C0F71 /* Interval Coverage.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Interval Coverage.cpp"; sourceTree = "<group>"; };
		E3D5836F1CE2A1FC00BE4A97 /* Summary Ranges.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Summary Ranges.cpp"; sourceTree = "<group>"; };
		E3D583711CE2A92D00BE4A97 /* Product of Array Except Self.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Product of Array Except Self.cpp"; sourceTree = "<group>"; };
		E3D583761CE3E93F00BE4A97 /* Reverse Vowels of a String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Vowels of a String.cpp"; sourceTree = "<group>"; };
		E3D583781CE44A2E00BE4A97 /* Word Pattern.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Word Pattern.cpp"; sourceTree = "<group>"; };
		E3F756851CEBD204000765A8 /* Get Dot Product.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Get Dot Product.cpp"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		97619D101A58E9B500133E44 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		97080AEF1A65BA19007B809D /* Heap */ = {
			isa = PBXGroup;
			children = (
				E350ACFD1CD72CF600DEE037 /* Priority Queue */,
				97E24B381B275572000AEE2E /* Heap Implementation.cpp */,
				97D6AC5E1AD5A10F007F28C7 /* Max Heap.h */,
				97D6AC5D1AD5A10F007F28C7 /* Max Heap.cpp */,
				9729598B1A7B064100C8BC04 /* K Smallest Num in Unsorted Array.cpp */,
				97080B2A1A6EFDA2007B809D /* Top K Frequent Words.cpp */,
				97080B251A6EE6EF007B809D /* K-th Smallest Num in Sorted Matrix.cpp */,
				97D303D71A7C42F800D60E6C /* K-th Smallest Sum in Two Sorted Arr.cpp */,
				971C56741A5B700D001E0315 /* Merge K Sorted Lists.cpp */,
				971C56721A5B6FCF001E0315 /* Merge K Sorted Arr.cpp */,
				973AA1301AA6B87C00C17790 /* Median Tracker.cpp */,
				97895D051B16BE5A00C33E15 /* ID Pool Implementation.cpp */,
				E350ACF21CD6F72200DEE037 /* Find Smallest Range.cpp */,
				E350ACF41CD6F84400DEE037 /* Sort k-diff Sorted Arr.cpp */,
			);
			name = Heap;
			sourceTree = "<group>";
		};
		97080AF01A65BA22007B809D /* DFS BFS */ = {
			isa = PBXGroup;
			children = (
				97B4231F1B4A228600B8F329 /* 150 */,
				97080B271A6EF22A007B809D /* Breadth First Search */,
				97080AF11A65BA9C007B809D /* Best First Search */,
				97DFBE6D1B34B43E0039800D /* Letter Combinations of a Phone Number.cpp */,
				97D967771AFDB48900C152EA /* Print All Valid Parentheses.cpp */,
				97EED4431A916AB70094BB6C /* Generate Parentheses .cpp */,
				97AF0E4E1AA84E88003EA180 /* Find Words Cycle.cpp */,
				97D74FD61AF563CA00EE657D /* Subset Sum.cpp */,
				97895D281B1FEEC200C33E15 /* Next Permutation.cpp */,
				97E24B3A1B2762E2000AEE2E /* K-th Permutation.cpp */,
				97DFBE831B38AA540039800D /* Combinations.cpp */,
				97DFBE7F1B378F2E0039800D /* Combination Sum.cpp */,
				97DFBE811B37BE870039800D /* Combination Sum II.cpp */,
				97DFBE851B38B22C0039800D /* Combination Sum III.cpp */,
				973035A61B535F9A000DC652 /* Word Search.cpp */,
				E3CDE6181CC1428C008C0F71 /* Num of Valid Paretheses.cpp */,
			);
			name = "DFS BFS";
			sourceTree = "<group>";
		};
		97080AF11A65BA9C007B809D /* Best First Search */ = {
			isa = PBXGroup;
			children = (
				97080AF21A65BB72007B809D /* Longest Length Product.cpp */,
				97080AF41A65BC92007B809D /* K-th Smallest Num in Function.cpp */,
				97080AF61A65BD17007B809D /* K-th Closest.cpp */,
				97080AF81A65CA5E007B809D /* Shortest Path in Gym.cpp */,
			);
			name = "Best First Search";
			sourceTree = "<group>";
		};
		97080AFA1A65CAAE007B809D /* System Design */ = {
			isa = PBXGroup;
			children = (
				97080AFB1A65CACF007B809D /* Sort Integer.cpp */,
				97080B001A688C92007B809D /* LRU Cache.cpp */,
				97080B1D1A6C77FA007B809D /* Search Suggestion System.cpp */,
				97AF0E501AAD5946003EA180 /* Singleton.cpp */,
				97D74FCC1AF3D7FA00EE657D /* Mine.cpp */,
				97D74FCE1AF3DF7F00EE657D /* STRING.cpp */,
				97080B081A6B1AF4007B809D /* First Non-Repeating Char in Stream.cpp */,
				97D74FD01AF3FD7C00EE657D /* first non repeat stream.cpp */,
				97E24B341B26B260000AEE2E /* Valid UTF-8.cpp */,
				97E24B361B26B4DC000AEE2E /* Read 4096 Bytes.cpp */,
				97E24B401B27DC96000AEE2E /* Parsing Message Format.cpp */,
				97D320BF1B55C947005A3C2B /* Hash Table.cpp */,
			);
			name = "System Design";
			sourceTree = "<group>";
		};
		97080AFD1A65CB69007B809D /* String */ = {
			isa = PBXGroup;
			children = (
				97B4230C1B48ABAB00B8F329 /* 150 */,
				978AAA4D1A9E48DE00ED046A /* Reverse/ Shift String */,
				978AAA4C1A9DAB8600ED046A /* De-dupulication */,
				978AAA491A9D8BDF00ED046A /* Remove */,
				97080B3E1A709296007B809D /* is Substring.cpp */,
				974D5B9B1A5CE963009A6D35 /* String Replace.cpp */,
				974D5B951A5CE809009A6D35 /* Decompress String I.cpp */,
				974D5B971A5CE865009A6D35 /* Decompress String II.cpp */,
				974D5B991A5CE8D2009A6D35 /* Compress String.cpp */,
				974D5B841A5BAF2B009A6D35 /* Longest Common Substring btw two strings.cpp */,
				974D5B821A5BAF07009A6D35 /* Longest Common Subsequence btw two strings.cpp */,
				97D303ED1A81EBF200D60E6C /* Sort String.cpp */,
				978AAA3F1A9CD8C200ED046A /* Most Frequent Char in String.cpp */,
				97CA538A1AA40ADF0056534F /* Add Binary.cpp */,
				97CA538C1AA40C550056534F /* Compare Version Numbers.cpp */,
				97CA538E1AA40CA00056534F /* Count and Say.cpp */,
				97CA53901AA40DC90056534F /* Longest Palindromic Substring.cpp */,
				97CA53921AA40E2F0056534F /* Longest Common Prefix.cpp */,
				97CA53941AA40F040056534F /* Valid Palindrome.cpp */,
				97CA53961AA40F450056534F /* String to Int.cpp */,
				97CA539A1AA410670056534F /* Length of Last Word.cpp */,
				97CA539C1AA4109F0056534F /* Group Anagrams.cpp */,
				97CA539E1AA445370056534F /* Longest Substr Without Repeated Chars.cpp */,
				97CA53A41AA62DF20056534F /* String Matching.cpp */,
				97D6AC641AD61DE9007F28C7 /* Hex for Int.cpp */,
				97D74FCA1AF331C400EE657D /* word play.cpp */,
				97895D141B197EC000C33E15 /* First Non-Repeat Char in String.cpp */,
				97895D261B1FCEA500C33E15 /* Arrange to Form Biggest Num.cpp */,
				97DFBE441B3246040039800D /* Sort Letter by Case.cpp */,
				97DFBE711B34D7B40039800D /* One Edit Distance.cpp */,
				97DFBE7D1B36396D0039800D /* Roman to Integer.cpp */,
				E3D583761CE3E93F00BE4A97 /* Reverse Vowels of a String.cpp */,
				976D3F271AD212320033B750 /* Isomorphic str.cpp */,
				E3D583781CE44A2E00BE4A97 /* Word Pattern.cpp */,
			);
			name = String;
			sourceTree = "<group>";
		};
		97080B021A688D07007B809D /* Math */ = {
			isa = PBXGroup;
			children = (
				97B4231D1B4A0F1300B8F329 /* sum of All Digits.cpp */,
				971C56501A5A3372001E0315 /* Fibonacci sequence.cpp */,
				97080B031A688D3D007B809D /* Str to Hex Int.cpp */,
				971C56521A5A3A17001E0315 /* pow.cpp */,
				97CA53A61AA63CAA0056534F /* x^x.cpp */,
				979A93821AB4FE44007DE692 /* Shuffle Array.cpp */,
				979A93881AB53678007DE692 /* k-th Smallest Num with 3.5.7 Factor.cpp */,
				97457E041ADF4BB3007A07A6 /* Palindrome Num.cpp */,
				97A4F0FD1AF1997900142761 /* Plus One.cpp */,
				97EA66371B3B48FA00F14235 /* Reverse Integer.cpp */,
			);
			name = Math;
			sourceTree = "<group>";
		};
		97080B051A6AFE7C007B809D /* Array */ = {
			isa = PBXGroup;
			children = (
				97DFBE4A1B3253940039800D /* Slow Fast Pointer */,
				97895D2A1B20194C00C33E15 /* Single Num */,
				97AD03111AF9B7A300703834 /* Precomputation of Sum */,
				97CA53751AA2860C0056534F /* Remove */,
				97CA537A1AA2A11F0056534F /* 2/3/4Sum */,
				97080B061A6AFEA5007B809D /* Max Elem in Window.cpp */,
				97080AFE1A685F5D007B809D /* K-th Smallest Num in Two Sorted Arr.cpp */,
				97E73BC01AD7140F00F69625 /* Median of Two Arr.cpp */,
				97080B0A1A6B3798007B809D /* Majority Num.cpp */,
				979A93841AB507B6007DE692 /* Majority Num II.cpp */,
				97080B0E1A6C6B9B007B809D /* Could be Merged by Two Arr.cpp */,
				97EED4491A91BD5F0094BB6C /* Most Frequent Words.cpp */,
				97080B3A1A70837B007B809D /* Largest and Smallest.cpp */,
				97080B3C1A708D86007B809D /* Largest and Second Largest.cpp */,
				97D303D91A7CA7B600D60E6C /* Common Num in Unsorted Arr.cpp */,
				974D5B861A5C5F3F009A6D35 /* Common Num in Sorted Arr.cpp */,
				97CA53761AA290460056534F /* Rotate Array.cpp */,
				97CA53781AA29F0A0056534F /* Merge Two Sorted Arr.cpp */,
				97CA53861AA407410056534F /* Pascal's Trangle.cpp */,
				97457E061ADF5FF5007A07A6 /* Sort Arr by Frequency.cpp */,
				97A4F0FF1AF1A69B00142761 /* Pascal's Trangle II.cpp */,
				97A4F1071AF1F55900142761 /* Single Num.cpp */,
				97A4F1111AF2DFF000142761 /* Intersection Union Diff of Two Sorted Arr.cpp */,
				97895D161B1A228800C33E15 /* Replace to get Longest Continuous Sequence.cpp */,
				97895D181B1A7A6C00C33E15 /* Check Has Triangle.cpp */,
				97895D1C1B1A89D900C33E15 /* Sort Arr based on Occurrence.cpp */,
				97895D241B1FAA8C00C33E15 /* Eight Queens.cpp */,
				97895D2F1B20D66000C33E15 /* Biggest Product of 3 Nums.cpp */,
				97DEC4B21B2DF7A100238313 /* Get Max Product Without One Num.cpp */,
				97DFBE571B332D9B0039800D /* find k-th Largest Element in Unsorted Arr.cpp */,
				97DFBE551B332D800039800D /* find k-th Smallest Element in Unsorted Arr.cpp */,
				97DFBE5D1B333A650039800D /* Contains Duplicate.cpp */,
				97DFBE5F1B333E250039800D /* Contains Duplicate II.cpp */,
				97DFBE611B334B2B0039800D /* Contains Duplicate III.cpp */,
				97DFBE671B339DDE0039800D /* Largest Number.cpp */,
				97DFBE731B34E87D0039800D /* Min Size Subarray Sum.cpp */,
				97DFBE751B35157E0039800D /* Insert Interval.cpp */,
				97B423091B48616000B8F329 /* Num of Possible Triangles.cpp */,
				973035A41B519F56000DC652 /* Longest subArr have Even 0 1.cpp */,
				E3CDE5F01CBB0379008C0F71 /* K Closest to Target in Sorted Arr.cpp */,
				97A4F1011AF1AD3400142761 /* Missing Range.cpp */,
				E3D5836F1CE2A1FC00BE4A97 /* Summary Ranges.cpp */,
				E3D583711CE2A92D00BE4A97 /* Product of Array Except Self.cpp */,
				E37EFF791D49757800B50582 /* Merge Intervals.cpp */,
				E37EFF831D52C3FF00B50582 /* Intersection of Two Arrays.cpp */,
				E37EFF851D52C40E00B50582 /* Intersection of Two Arrays II.cpp */,
			);
			name = Array;
			sourceTree = "<group>";
		};
		97080B111A6C6FD7007B809D /* Reconstruct Binary Tree */ = {
			isa = PBXGroup;
			children = (
				97080B121A6C702B007B809D /* Reconstruct Bianry Tree With pre_in Order.cpp */,
				97080B141A6C70E7007B809D /* Reconstruct Binary Tree With post_in Order.cpp */,
				97080B161A6C714C007B809D /* Reconstruct Binary Tree With level_in Order.cpp */,
			);
			name = "Reconstruct Binary Tree";
			sourceTree = "<group>";
		};
		97080B181A6C7687007B809D /* Most Num of Points in 2D Space */ = {
			isa = PBXGroup;
			children = (
				97080B191A6C76C2007B809D /* Most Points on a Line.cpp */,
				97080B1B1A6C776A007B809D /* Largest Set of Points with Positive Slope.cpp */,
			);
			name = "Most Num of Points in 2D Space";
			sourceTree = "<group>";
		};
		97080B271A6EF22A007B809D /* Breadth First Search */ = {
			isa = PBXGroup;
			children = (
				97D02B5C1AB6587E00C73F56 /* Word Ladder.cpp */,
			);
			name = "Breadth First Search";
			sourceTree = "<group>";
		};
		97080B421A70B75D007B809D /* Tree */ = {
			isa = PBXGroup;
			children = (
				E350AD071CDA7CA000DEE037 /* Binary Tree */,
				97B423141B49ADB000B8F329 /* 150 */,
				97D303FA1A8352AD00D60E6C /* BST operation */,
				97080B111A6C6FD7007B809D /* Reconstruct Binary Tree */,
				97D304031A858C2300D60E6C /* Lowest Common Ancestor */,
				9762EC831ACCCF1D00F95AB6 /* Path Sum */,
				E3CDE6101CBE9695008C0F71 /* View of Binary Tree */,
				97EED44F1A9A919E0094BB6C /* BinaryTree.h */,
				974D5B931A5CD6C5009A6D35 /* Height of Binary Tree.cpp */,
				97D303FD1A83565C00D60E6C /* Same Binary Tree.cpp */,
				97D303FB1A83557600D60E6C /* Symmetric Binary Tree.cpp */,
				97D304011A83582C00D60E6C /* Tweaked Identical Binary Trees.cpp */,
				97D303DF1A81995B00D60E6C /* ZigZag Traverse Binary Tree.cpp */,
				97D303E11A819E2D00D60E6C /* Level Order Traverse Binary Tree.cpp */,
				974D5BAB1A5E823C009A6D35 /* Reverse Binary Tree.cpp */,
				97CA53A21AA626C60056534F /* Get Left Subtree Nodes.cpp */,
				97D02B5A1AB5411500C73F56 /* Reconstruct Complete Binary Tree From Level Order.cpp */,
				976D3F251AD1CFC40033B750 /* is_cousin.cpp */,
				97D6AC621AD5C24C007F28C7 /* Is Completed Binary Tree.cpp */,
				97D74FD41AF55D1C00EE657D /* Distance btw Two Nodes.cpp */,
				97E24B321B268E8B000AEE2E /* Delete Node which has One Child.cpp */,
				97E24B481B2CC045000AEE2E /* Distance btw Closet Leaf Node and Target.cpp */,
				97DFBE2C1B2FD9A20039800D /* Heapify Complete Binary Tree.cpp */,
				97DFBE321B31DB7E0039800D /* All Visible Nodes.cpp */,
				97DFBE5B1B3335280039800D /* Invert Binary Tree.cpp */,
				97DFBE6F1B34CA210039800D /* Count Complete Tree Nodes.cpp */,
				E350ACE71CD586DB00DEE037 /* Graph Valid Tree.cpp */,
				E350AD0A1CDACD2800DEE037 /* Sum of All Paths.cpp */,
				E350AD0E1CDB2E5E00DEE037 /* Visible Nodes.cpp */,
			);
			name = Tree;
			sourceTree = "<group>";
		};
		974D5B9D1A5CF189009A6D35 /* Binary Search */ = {
			isa = PBXGroup;
			children = (
				E350ACFE1CD7F63D00DEE037 /* Binary Search */,
				97CA537B1AA2A5350056534F /* Find Insert Position NoDup.cpp */,
				E350ACFF1CD8041500DEE037 /* Find Insert Position hasDup.cpp */,
				97CA53821AA2FB040056534F /* Find Peak Num.cpp */,
				97895D0B1B17CD0C00C33E15 /* Find Local Min.cpp */,
				97CA537F1AA2A7760056534F /* Rotated Sorted Arr */,
				971C564E1A5A30BE001E0315 /* Binary Search.cpp */,
				971C56541A5A3E5A001E0315 /* First Occurrence Elem.cpp */,
				971C56561A5A44AD001E0315 /* Last Occurrence Elem.cpp */,
				971C566A1A5B4C67001E0315 /* Total Occurrence.cpp */,
				97CA53801AA2C9570056534F /* Search for a Range.cpp */,
				971C56581A5A4AA0001E0315 /* Closest Elem in Sorted Arr.cpp */,
				971C565A1A5A4DB5001E0315 /* K Closet Elems in Sorted Arr.cpp */,
				971C565C1A5A51A0001E0315 /* unknown size binary search.cpp */,
				97A4F1031AF1D52D00142761 /* sqrt.cpp */,
				97A4F1131AF2EB1700142761 /* Find Max in Increase Decrease Arr.cpp */,
				97895D071B17C11E00C33E15 /* Smallest Larger Than Target.cpp */,
				97895D091B17C56000C33E15 /* Largest Smaller Than Target.cpp */,
				97895D0D1B17D49E00C33E15 /* Find Max in Sorted Reversed Arr.cpp */,
				97895D0F1B17DFD800C33E15 /* Divide.cpp */,
				97B423241B4B693B00B8F329 /* Search with Empty Str.cpp */,
				97B423261B4C6F9000B8F329 /* get Rank of Num.cpp */,
				E350AD011CD81D4400DEE037 /* First Bad Version.cpp */,
			);
			name = "Binary Search";
			sourceTree = "<group>";
		};
		974D5BA01A5E0481009A6D35 /* Stack */ = {
			isa = PBXGroup;
			children = (
				97D304061A86AB8D00D60E6C /* Sort With 3 Stacks.cpp */,
				972959891A7AF04500C8BC04 /* Queue by Two Stacks.cpp */,
				97D304041A86AA7600D60E6C /* Stack with Min().cpp */,
				97D30D5B1A88105B00FAC61A /* Evaluate Reverse Polish Notation.cpp */,
				97CA53981AA40FE40056534F /* Valid Parentheses.cpp */,
				97B4230E1B49993A00B8F329 /* Use Arr build Stack.cpp */,
				97B423101B49A64400B8F329 /* Set of Stacks.cpp */,
				97B423121B49AC1800B8F329 /* Sort One Stack.cpp */,
			);
			name = Stack;
			sourceTree = "<group>";
		};
		974D5BA11A5E0488009A6D35 /* Linked List */ = {
			isa = PBXGroup;
			children = (
				9795378D1B44B375002183CF /* LinkedList.h */,
				97B4230D1B48D25600B8F329 /* 150 */,
				97DEC4C31B2E401300238313 /* Reverse List */,
				97C30C061B0291DF00C2CE98 /* Remove Node */,
				97C30C051B0291BE00C2CE98 /* Copy List */,
				9729597F1A79C99400C8BC04 /* Mid Node of Linked List.cpp */,
				974D5BA21A5E0A26009A6D35 /* Insert in Sorted Linked List.cpp */,
				974D5BA41A5E0C0A009A6D35 /* Merge Two Sorted Linked Lists.cpp */,
				97080B231A6DEAFE007B809D /* Reorder Linked List.cpp */,
				97D02B701AB691EE00C73F56 /* Rotate List.cpp */,
				97D02B721AB6928100C73F56 /* Merge Two Lists Alternatively.cpp */,
				97D02B741AB6930F00C73F56 /* Intersection of Two Lists.cpp */,
				97A4F1171AF3008500142761 /* Longest Sublist without Dup Nodes.cpp */,
				97D74FD21AF47CF400EE657D /* Swap Two Nodes in List.cpp */,
				97DEC4BF1B2E336900238313 /* Print List Reverse Order.cpp */,
				E350AD031CD9BFFC00DEE037 /* Odd Even Linked List.cpp */,
			);
			name = "Linked List";
			sourceTree = "<group>";
		};
		974D5BB01A6102C2009A6D35 /* 2D Array */ = {
			isa = PBXGroup;
			children = (
				97895D111B19033C00C33E15 /* Young's Matrix */,
				97080B181A6C7687007B809D /* Most Num of Points in 2D Space */,
				97080B1F1A6C78B9007B809D /* Generate Random Maze.cpp */,
				97080B211A6C78F7007B809D /* Disjoint White Objects.cpp */,
				97D30D611A8960F300FAC61A /* Print Matrix Clockwise.cpp */,
				97CA53A81AA646460056534F /* Spiral Order Traverse I.cpp */,
				97CA53AA1AA64A200056534F /* Spiral Order Traverse II.cpp */,
				97D303EB1A81D4AF00D60E6C /* Spiral Order Generate I.cpp */,
				97CA53AC1AA64D740056534F /* Spiral Order Generate II.cpp */,
				976D3F1E1AD0E1E00033B750 /* 2D_arr.cpp */,
			);
			name = "2D Array";
			sourceTree = "<group>";
		};
		97619D0A1A58E9B500133E44 = {
			isa = PBXGroup;
			children = (
				97619D161A58E9B500133E44 /* main.cpp */,
				E3AC0D851D3E81C200CE7A16 /* JJ1 */,
				97619D151A58E9B500133E44 /* LaiOffer */,
				97619D141A58E9B500133E44 /* Products */,
			);
			sourceTree = "<group>";
		};
		97619D141A58E9B500133E44 /* Products */ = {
			isa = PBXGroup;
			children = (
				97619D131A58E9B500133E44 /* LaiOffer */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		97619D151A58E9B500133E44 /* LaiOffer */ = {
			isa = PBXGroup;
			children = (
				E340BCBC1CF4A2EA002E8A46 /* Graph */,
				E3336FDF1CB035D400728057 /* 新的小班 */,
				97C30C421B0FE7AF00C2CE98 /* Basic */,
				974D5B911A5C6EF4009A6D35 /* Header.h */,
				97080B051A6AFE7C007B809D /* Array */,
				974D5BB01A6102C2009A6D35 /* 2D Array */,
				97080AFD1A65CB69007B809D /* String */,
				97D6AC4C1AD39ADF007F28C7 /* Bloomberg */,
				97D02B761AB7665500C73F56 /* 小班 */,
				97BEF4851A73440200FDB6DA /* Final Exam */,
				974D5B9D1A5CF189009A6D35 /* Binary Search */,
				97619D1D1A58E9EE00133E44 /* Sorting Algorithm */,
				974D5BA11A5E0488009A6D35 /* Linked List */,
				97080B421A70B75D007B809D /* Tree */,
				974D5BA01A5E0481009A6D35 /* Stack */,
				97080AEF1A65BA19007B809D /* Heap */,
				9765FB601AB29B0F00489CC0 /* DP */,
				97080AF01A65BA22007B809D /* DFS BFS */,
				97080B021A688D07007B809D /* Math */,
				97080AFA1A65CAAE007B809D /* System Design */,
			);
			path = LaiOffer;
			sourceTree = "<group>";
		};
		97619D1D1A58E9EE00133E44 /* Sorting Algorithm */ = {
			isa = PBXGroup;
			children = (
				97619D201A590B1B00133E44 /* Merge Sort Array.cpp */,
				97619D221A599DFC00133E44 /* Quick Sort Array.cpp */,
				97DFBE4B1B3259180039800D /* Quick Select Arr.cpp */,
				97B423221B4B24C300B8F329 /* Bubble Sort.cpp */,
				97619D1E1A58EA0900133E44 /* Selection Sort Array.cpp */,
				97BEF4921A75AF8900FDB6DA /* Inversion Pair in Array.cpp */,
				97D320C11B56C5FF005A3C2B /* Insertion Sort Linked List.cpp */,
				971C565E1A5B4BD7001E0315 /* Merge Sort Linked List.cpp */,
				97D6AC571AD4E2AA007F28C7 /* Quick Sort Linked List.cpp */,
				97D6AC591AD4E331007F28C7 /* Selection Sort Linked List.cpp */,
				971C564B1A5A24E8001E0315 /* Rainbow Sort.cpp */,
				97A4F0FB1AEF2F1A00142761 /* Sort by 3 Stacks.cpp */,
			);
			name = "Sorting Algorithm";
			sourceTree = "<group>";
		};
		9762EC831ACCCF1D00F95AB6 /* Path Sum */ = {
			isa = PBXGroup;
			children = (
				974D5B8F1A5C6DC4009A6D35 /* Max Sum Leaf to Leaf.cpp */,
				9762EC811ACCCA6C00F95AB6 /* Max Sum Anynode to Anynode.cpp */,
				974D5BB61A611908009A6D35 /* Max Sum Root to Leaf.cpp */,
				97C3FA551ACE07DC00573E43 /* Max Sum Any to Any(Root to Leaf).cpp */,
				974D5BB81A61DBBB009A6D35 /* Has Sum Any to Any(Root to Leaf).cpp */,
				974D5BBA1A61DD97009A6D35 /* Longest Distance Leaf to Leaf.cpp */,
				974D5B9E1A5DF89E009A6D35 /* Find Node with Max Diff Subtree.cpp */,
				97895D221B1F9B6D00C33E15 /* Num of Path Sum Root to Leaf.cpp */,
				E3CDE5FE1CBCC0EB008C0F71 /* Sum Root To Leaf Numbers.cpp */,
				E3CDE60C1CBE9470008C0F71 /* Has Sum Root To Leaf.cpp */,
				E3CDE60E1CBE948E008C0F71 /* Find Sum Root To Leaf.cpp */,
				97B4231B1B49E7D800B8F329 /* All Paths Sum to Target.cpp */,
			);
			name = "Path Sum";
			sourceTree = "<group>";
		};
		9765FB601AB29B0F00489CC0 /* DP */ = {
			isa = PBXGroup;
			children = (
				979A937C1AB3F953007DE692 /* 1D */,
				979A93771AB3F389007DE692 /* 2D */,
				979A93861AB529D4007DE692 /* Interleave Array.cpp */,
			);
			name = DP;
			sourceTree = "<group>";
		};
		976D3F201AD1B1640033B750 /* April 5 */ = {
			isa = PBXGroup;
			children = (
			);
			name = "April 5";
			sourceTree = "<group>";
		};
		978712B21AE2D65500957360 /* April 18 */ = {
			isa = PBXGroup;
			children = (
				978712B31AE2D66E00957360 /* Q1.cpp */,
				978712B51AE2DDA500957360 /* Q2.cpp */,
				978712B71AE2E16A00957360 /* Q3.cpp */,
				978712B91AE2E53000957360 /* Q4.cpp */,
			);
			name = "April 18";
			sourceTree = "<group>";
		};
		97895D111B19033C00C33E15 /* Young's Matrix */ = {
			isa = PBXGroup;
			children = (
				978AAA471A9CF61D00ED046A /* 2D Liner Search.cpp */,
				972959851A7A164300C8BC04 /* 2D Binary Search.cpp */,
				97895D121B19038F00C33E15 /* Num of Values Smaller than Target in Young's Matrix.cpp */,
			);
			name = "Young's Matrix";
			sourceTree = "<group>";
		};
		97895D2A1B20194C00C33E15 /* Single Num */ = {
			isa = PBXGroup;
			children = (
				97895D201B1BE7C600C33E15 /* First Missing Positive.cpp */,
				97895D1E1B1BE4CE00C33E15 /* Find Two Repeating Num(1-N).cpp */,
				97D30D5D1A88426000FAC61A /* Missing One in Unsorted Arr(1-N).cpp */,
				97E24B3C1B2797A5000AEE2E /* Missing One in Sorted Arr(1-N).cpp */,
				97895D2B1B20197100C33E15 /* All exist Twice but One Num.cpp */,
				97895D2D1B201DFC00C33E15 /* All exist Three times but One Num.cpp */,
				97E24B3E1B27AAF0000AEE2E /* Swap Back Value based on Position.cpp */,
			);
			name = "Single Num";
			sourceTree = "<group>";
		};
		978AAA491A9D8BDF00ED046A /* Remove */ = {
			isa = PBXGroup;
			children = (
				978AAA4A1A9D8C1900ED046A /* Remove Particular Chars From String.cpp */,
				978AAA411A9CDD4500ED046A /* Remove Space in String.cpp */,
			);
			name = Remove;
			sourceTree = "<group>";
		};
		978AAA4C1A9DAB8600ED046A /* De-dupulication */ = {
			isa = PBXGroup;
			children = (
				97080B2E1A6F5BCB007B809D /* Remove Adjacent Repeated Char.cpp */,
				97080B301A6F6379007B809D /* Remove Adjacent Repeated CharII.cpp */,
				978AAA431A9CE7F700ED046A /* Remove Adjacent Repeated Chars III.cpp */,
				97080B401A70AB1B007B809D /* Deduplicate Same Adj Char.cpp */,
			);
			name = "De-dupulication";
			sourceTree = "<group>";
		};
		978AAA4D1A9E48DE00ED046A /* Reverse/ Shift String */ = {
			isa = PBXGroup;
			children = (
				97080B321A6F6C57007B809D /* Reverse Words in Sentence.cpp */,
				978AAA4E1A9E4DCB00ED046A /* Reverse a string.cpp */,
				978AAA501A9E502D00ED046A /* Shift Word.cpp */,
			);
			name = "Reverse/ Shift String";
			sourceTree = "<group>";
		};
		979A93771AB3F389007DE692 /* 2D */ = {
			isa = PBXGroup;
			children = (
				97E24B441B2CAEA5000AEE2E /* Replace to get Longest Continuous Subarr.cpp */,
				979A93731AB3DC81007DE692 /* Largest Square of 1s in Matrix.cpp */,
				979A93751AB3E0C8007DE692 /* Largest Cross 1s.cpp */,
				979A93781AB3F3E8007DE692 /* Largest Subsquare Surrounded by 1.cpp */,
				979A937A1AB3F47D007DE692 /* Largest Sum Submatrix.cpp */,
				97E24B421B27FD21000AEE2E /* Nums of Combination of Coins.cpp */,
			);
			name = 2D;
			sourceTree = "<group>";
		};
		979A937C1AB3F953007DE692 /* 1D */ = {
			isa = PBXGroup;
			children = (
				979A937D1AB3F985007DE692 /* Jump Game */,
				979A936D1AB3A5D4007DE692 /* Largest Sum of Subarr.cpp */,
				9765FB631AB2B9EF00489CC0 /* Longest Increasing Subarray.cpp */,
				979A936F1AB3AE75007DE692 /* Longest Increasing Subsequence.cpp */,
				9765FB651AB2BF6700489CC0 /* Maximal Product When Cutting Rope.cpp */,
				979A93711AB3BF1C007DE692 /* Longest Consecutive 1s.cpp */,
				979A937E1AB41138007DE692 /* Buy StockI.cpp */,
				979A93801AB411A7007DE692 /* Buy StockII.cpp */,
				976D3F291AD21B8C0033B750 /* shortest_square_in_num.cpp */,
				97457E021ADCA9D8007A07A6 /* Edit Distance.cpp */,
				97DFBE631B334E160039800D /* House Robber.cpp */,
				97EA66331B3A49C300F14235 /* Longest Increasing Subpath in Binary Tree.cpp */,
				97EA66351B3A5B2A00F14235 /* Shortest List of Integer.cpp */,
				E30EE2CB1D4674DF00FCAFFF /* Triangle.cpp */,
				E37EFF611D47F78500B50582 /* Buy StockIII.cpp */,
				E37EFF691D4864C300B50582 /* Mininum Path Sum.cpp */,
				E37EFF6D1D48708800B50582 /* Unique Path Sum.cpp */,
				E37EFF711D4948B500B50582 /* Unique Paths.cpp */,
				E37EFF731D4948C400B50582 /* Unique Paths II.cpp */,
			);
			name = 1D;
			sourceTree = "<group>";
		};
		979A937D1AB3F985007DE692 /* Jump Game */ = {
			isa = PBXGroup;
			children = (
				9765FB671AB2C08500489CC0 /* Jump Game_jump to end or not.cpp */,
				979A936B1AB3A591007DE692 /* Min Number of Jumps.cpp */,
			);
			name = "Jump Game";
			sourceTree = "<group>";
		};
		97AD03111AF9B7A300703834 /* Precomputation of Sum */ = {
			isa = PBXGroup;
			children = (
				97AD03121AF9B7C700703834 /* Subarr Sum.cpp */,
			);
			name = "Precomputation of Sum";
			sourceTree = "<group>";
		};
		97B4230C1B48ABAB00B8F329 /* 150 */ = {
			isa = PBXGroup;
			children = (
				979537901B44BC74002183CF /* Is Permutation Strings.cpp */,
				97D303DB1A7DC0A100D60E6C /* All Unique Chars.cpp */,
				97080B2C1A6F5B6B007B809D /* Encode Space.cpp */,
				979537921B44C0AB002183CF /* Compress Str.cpp */,
				97CA537D1AA2A7470056534F /* Rotate Image.cpp */,
				97CA53841AA406DD0056534F /* Set Matrix Zero.cpp */,
			);
			name = 150;
			sourceTree = "<group>";
		};
		97B4230D1B48D25600B8F329 /* 150 */ = {
			isa = PBXGroup;
			children = (
				97D02B6A1AB690D200C73F56 /* Remove Dup in Unsorted List.cpp */,
				97D02B6E1AB6917E00C73F56 /* Find Nth Node From End of List.cpp */,
				97AD030F1AF6E82D00703834 /* Delete Node in List.cpp */,
				972959871A7AEFC000C8BC04 /* Partition Linked List.cpp */,
				97D02B621AB68E9000C73F56 /* Add Two ListsI.cpp */,
				97DEC4CC1B2E605500238313 /* Add Two ListsII.cpp */,
				972959811A79C9E600C8BC04 /* Check Cycle and Find Cycle.cpp */,
				97AF0E461AA7A581003EA180 /* Is Palindrome Linke List.cpp */,
			);
			name = 150;
			sourceTree = "<group>";
		};
		97B423141B49ADB000B8F329 /* 150 */ = {
			isa = PBXGroup;
			children = (
				974D5B8D1A5C6D74009A6D35 /* Is Balanced Bianry Tree.cpp */,
				97B423151B49AFCB00B8F329 /* has Root btw Two Nodes.cpp */,
				97B423171B49B58400B8F329 /* Sorted Arr to BST.cpp */,
				97B423191B49CA4B00B8F329 /* Create LinkedList on Each Level.cpp */,
				97D303FF1A8357A800D60E6C /* is BST.cpp */,
				97DFBE341B31DE030039800D /* In-order Successor Node.cpp */,
				97D02BBD1AB7745800C73F56 /* Is Subtree.cpp */,
			);
			name = 150;
			sourceTree = "<group>";
		};
		97B4231F1B4A228600B8F329 /* 150 */ = {
			isa = PBXGroup;
			children = (
				9765FB611AB29C2900489CC0 /* Fibonacci.cpp */,
				97B423201B4A230600B8F329 /* Climb Stairs.cpp */,
				97D30D631A8FA9B200FAC61A /* subset no dup.cpp */,
				97D30D671A9040E600FAC61A /* subset has dup.cpp */,
				97D30D651A8FCE1400FAC61A /* permutation no dup.cpp */,
				97DFBE771B3614AB0039800D /* Permutations.cpp */,
				97EED4471A91B0160094BB6C /* permutation with dup.cpp */,
				97EED4451A91706E0094BB6C /* Combinations Of Coins.cpp */,
			);
			name = 150;
			sourceTree = "<group>";
		};
		97BEF4851A73440200FDB6DA /* Final Exam */ = {
			isa = PBXGroup;
			children = (
				97BEF4881A7346B200FDB6DA /* shift string.cpp */,
			);
			name = "Final Exam";
			sourceTree = "<group>";
		};
		97C30C051B0291BE00C2CE98 /* Copy List */ = {
			isa = PBXGroup;
			children = (
				971C566E1A5B5DDB001E0315 /* Deep Copy Skip List.cpp */,
				971C56701A5B6D5B001E0315 /* Copy Linked List with Random Pointer.cpp */,
				974D5B7E1A5B70C7009A6D35 /* Deep Copy Undirectd Graph.cpp */,
			);
			name = "Copy List";
			sourceTree = "<group>";
		};
		97C30C061B0291DF00C2CE98 /* Remove Node */ = {
			isa = PBXGroup;
			children = (
				97D02B661AB68FD700C73F56 /* Remove Dup in Sorted List.cpp */,
				97D02B681AB6906100C73F56 /* Remove Dup in Sorted List II.cpp */,
				97D02B6C1AB6912700C73F56 /* Remove Nth From End of List.cpp */,
				97A4F1091AF2ABFD00142761 /* Remove Linked List Elem.cpp */,
				97A4F1151AF2FAC300142761 /* Remove Nodes by Indices.cpp */,
			);
			name = "Remove Node";
			sourceTree = "<group>";
		};
		97C30C421B0FE7AF00C2CE98 /* Basic */ = {
			isa = PBXGroup;
			children = (
				97C30C431B0FE7D800C2CE98 /* Templates Use.cpp */,
				97C30C451B0FF78E00C2CE98 /* Inheritance.cpp */,
				97C30C471B0FFA5200C2CE98 /* Virtual Function.cpp */,
				97DFBE6B1B349D2B0039800D /* Implement Trie (Prefix Tree).cpp */,
				97B423281B4C92C800B8F329 /* print Last K Lines in File.cpp */,
			);
			name = Basic;
			sourceTree = "<group>";
		};
		97CA53751AA2860C0056534F /* Remove */ = {
			isa = PBXGroup;
			children = (
				971C56491A5A2122001E0315 /* remove element.cpp */,
				97080B341A6F7C06007B809D /* Remove Dup in Sorted Arr keep one.cpp */,
				97080B361A6F7C61007B809D /* Remove Dup in Sorted Arr keep two.cpp */,
				97080B381A6F8087007B809D /* Remove Dup in Sorted Arr keep none.cpp */,
				97CA53AE1AA68D4C0056534F /* Array Deduplication.cpp */,
			);
			name = Remove;
			sourceTree = "<group>";
		};
		97CA537A1AA2A11F0056534F /* 2/3/4Sum */ = {
			isa = PBXGroup;
			children = (
				97BEF48A1A74665F00FDB6DA /* 2Sum.cpp */,
				978AAA451A9CF2AA00ED046A /* 2Sum One Pair Find Index.cpp */,
				97DFBE531B3322680039800D /* 2Sum One pair Find Index Sorted Arr.cpp */,
				97BEF4831A733E7D00FDB6DA /* 2Sum All Pair Find Index.cpp */,
				97BEF48C1A746BDD00FDB6DA /* 2Sum All Pair Find Value(no dup).cpp */,
				97895D311B20DE5200C33E15 /* 2Sum All Pair Find Value(has dup).cpp */,
				97BEF48E1A74752100FDB6DA /* 2Sum Closest Find Value.cpp */,
				97BEF4941A75CE5C00FDB6DA /* 2Sum Smaller Find Value.cpp */,
				97D02B5E1AB66F2B00C73F56 /* 2Sum 2 Arrays.cpp */,
				97BEF4901A748C8A00FDB6DA /* 3Sum Find Value.cpp */,
				97D30D5F1A89608B00FAC61A /* 3Sum Closest.cpp */,
				97D02B601AB66FC100C73F56 /* 3Sum 3 Arrays.cpp */,
				976D3F231AD1CF900033B750 /* 2Sum_rotated_sorted_arr.cpp */,
				97DFBE651B33624F0039800D /* 2Sum Data Structure Design.cpp */,
				E3AC0D8C1D3F4B9300CE7A16 /* 4Sum.cpp */,
			);
			name = 2/3/4Sum;
			sourceTree = "<group>";
		};
		97CA537F1AA2A7760056534F /* Rotated Sorted Arr */ = {
			isa = PBXGroup;
			children = (
				971C56641A5B4C2B001E0315 /* search in shifted sorted arr I.cpp */,
				971C56661A5B4C42001E0315 /* search in shifted sorted arr II.cpp */,
				971C56681A5B4C50001E0315 /* Min in Rotated Sorted Arr.cpp */,
			);
			name = "Rotated Sorted Arr";
			sourceTree = "<group>";
		};
		97D02B761AB7665500C73F56 /* 小班 */ = {
			isa = PBXGroup;
			children = (
				97D967791B00120800C152EA /* May 10 */,
				978712B21AE2D65500957360 /* April 18 */,
				976D3F201AD1B1640033B750 /* April 5 */,
				97D02B771AB7666900C73F56 /* Merge Overlapping Intervals.cpp */,
				97D02B791AB766FE00C73F56 /* Pattern Matche.cpp */,
				97D02B7B1AB7677D00C73F56 /* Largest Val from Arr of Nums in String type.cpp */,
				97D02B7F1AB7682700C73F56 /* Divide Set into Two Subset with Min diff of Sum.cpp */,
				97D02B811AB7687A00C73F56 /* Transform a BST to Greater Sum Tree.cpp */,
				97D02B831AB768D900C73F56 /* Connect Right NULL Child to inorder Successor.cpp */,
				97D02B851AB7698B00C73F56 /* Count Num of Words in String.cpp */,
				97D02B871AB769D400C73F56 /* Reconstruct BST from PreOrder.cpp */,
				97D02B891AB76A6000C73F56 /* Insert Least Num of Char to make String Palindrome.cpp */,
				97D02B8B1AB76B5E00C73F56 /* All Subsequence From String.cpp */,
				97D02B8D1AB76BA800C73F56 /* All Combination of Factor could Multiply to Target.cpp */,
				97D02B8F1AB76C5E00C73F56 /* Find Order of Chars in Dic.cpp */,
				97D02B911AB76CF300C73F56 /* Get Count of Right Smaller Nums.cpp */,
				97D02B931AB76D3400C73F56 /* Find Only One Dup Num.cpp */,
				97D02B951AB76D9D00C73F56 /* Two Nums with Same Diff to Target.cpp */,
				97D02B971AB76EB100C73F56 /* Bottom View of Binary Tree.cpp */,
				97D02B991AB76F4D00C73F56 /* Wether Edges could Form a Tree.cpp */,
				97D02B9B1AB76F7800C73F56 /* Max Product Subarr.cpp */,
				97D02B9D1AB76FAF00C73F56 /* Matrix Water.cpp */,
				97D02B9F1AB76FE400C73F56 /* Find Lowest Node in Binary Tree.cpp */,
				97D02BA11AB7700A00C73F56 /* Count Nodes in Given Range in BST.cpp */,
				97D02BA31AB7703B00C73F56 /* Longest Bitonic Subsequence.cpp */,
				97D02BA51AB7708F00C73F56 /* Is PostOrder of BST.cpp */,
				97D02BA71AB7712400C73F56 /* Smallest Window in Str Contain all Char of another Str.cpp */,
				97D02BA91AB7719200C73F56 /* Has Subarr Sums to Target.cpp */,
				97D02BAD1AB7721D00C73F56 /* All Combination of K Elem in Arr.cpp */,
				97D02BAF1AB7729B00C73F56 /* Positive Negative Alternatively.cpp */,
				97D02BB11AB772D400C73F56 /* Get PostOrder from InOrder and Preorder from BT.cpp */,
				97D02BB31AB7730600C73F56 /* Convert BT to DLL.cpp */,
				97D02BB51AB7733500C73F56 /* Find Distance Between Two Nodes in BT.cpp */,
				97D02BB71AB7738900C73F56 /* Str Chained Form a Circle.cpp */,
				97D02BB91AB773B500C73F56 /* Is palindrom List.cpp */,
				97D02BBB1AB773F600C73F56 /* All Paths Sum to Target in BT.cpp */,
				97D02BBF1AB774C600C73F56 /* Nested Int Weighted Sum.cpp */,
				97D02BC11AB7754F00C73F56 /* Is Cousins in BT.cpp */,
				97D02BC31AB775AA00C73F56 /* Reverse Alternate Nodes in List and Append at End.cpp */,
				97D02BC51AB7762600C73F56 /* Is in Sorted 2D Arr.cpp */,
				97D02BC71AB7766100C73F56 /* Common Elem in 2D Sorted Arr.cpp */,
				97D02BC91AB776F600C73F56 /* Diagonal Sum of BT.cpp */,
				97D02BCB1AB7773000C73F56 /* Delete Node with Cost larger than K.cpp */,
				97D02BCD1AB7776D00C73F56 /* Closet K Points to Origin.cpp */,
				97D02BCF1AB777F200C73F56 /* All Permutation of Str after insert Empty Space.cpp */,
				97D02BD11AB7782500C73F56 /* 3Sum Less.cpp */,
			);
			name = "小班";
			sourceTree = "<group>";
		};
		97D303FA1A8352AD00D60E6C /* BST operation */ = {
			isa = PBXGroup;
			children = (
				E3CDE5E01CBAFBF9008C0F71 /* Basic Operations */,
				E3CDE5E51CBAFCBA008C0F71 /* Close Num in BST */,
				E3CDE5F21CBB05A6008C0F71 /* BST vs Sorted Arr */,
				97D02B581AB53B4200C73F56 /* Reconstruct BST with Pre Order Traversal.cpp */,
				97895D1A1B1A883E00C33E15 /* Design BST.cpp */,
				974D5BAD1A60894B009A6D35 /* Keep Nodes Within Range.cpp */,
				97DFBE281B2FD12E0039800D /* Remove Nodes Outside of Range.cpp */,
				97DFBE2A1B2FD5CA0039800D /* Remove Trailing Zero Nodes.cpp */,
				E350AD081CDABF5D00DEE037 /* Change Node Value in BST.cpp */,
			);
			name = "BST operation";
			sourceTree = "<group>";
		};
		97D304031A858C2300D60E6C /* Lowest Common Ancestor */ = {
			isa = PBXGroup;
			children = (
				97E24B461B2CB9B4000AEE2E /* Lowest Common Ancestor of BST.cpp */,
				97D303E31A81A30900D60E6C /* Lowest Common Ancestor of BT.cpp */,
				97D303E71A81BB5D00D60E6C /* Lowest Common Ancestor of K Nodes in BT.cpp */,
				97D303E51A81A6F100D60E6C /* Lowest Common Ancestor has Parent.cpp */,
				97D303E91A81BE6500D60E6C /* Lowest Common Ancestor IV.cpp */,
			);
			name = "Lowest Common Ancestor";
			sourceTree = "<group>";
		};
		97D6AC4C1AD39ADF007F28C7 /* Bloomberg */ = {
			isa = PBXGroup;
			children = (
				97D6AC4D1AD453F4007F28C7 /* Linked List Cycle.cpp */,
				97D6AC4F1AD454DD007F28C7 /* Intersection in Linked List.cpp */,
				97D6AC511AD45EBC007F28C7 /* Convert Sorted Arr to BST.cpp */,
				97D6AC531AD45FB4007F28C7 /* Design Text Editor.cpp */,
				97D6AC551AD45FF4007F28C7 /* Longest Path in BT.cpp */,
			);
			name = Bloomberg;
			sourceTree = "<group>";
		};
		97D967791B00120800C152EA /* May 10 */ = {
			isa = PBXGroup;
			children = (
				97D9677A1B00122400C152EA /* Common Elem in 3 Sorted Arr.cpp */,
			);
			name = "May 10";
			sourceTree = "<group>";
		};
		97DEC4C31B2E401300238313 /* Reverse List */ = {
			isa = PBXGroup;
			children = (
				974D5BA71A5E2DF1009A6D35 /* Reverse Linked List.cpp */,
				97D02B641AB68F1A00C73F56 /* Reverse Part of List.cpp */,
				97DEC4C11B2E3AED00238313 /* Reverse Double Linked List.cpp */,
				97DEC4C41B2E403B00238313 /* Reverse Circular List.cpp */,
				974D5BA91A5E77A2009A6D35 /* Swap Pair Nodes in Linked List.cpp */,
			);
			name = "Reverse List";
			sourceTree = "<group>";
		};
		97DFBE4A1B3253940039800D /* Slow Fast Pointer */ = {
			isa = PBXGroup;
			children = (
				97A4F10B1AF2C97000142761 /* Partition Arr.cpp */,
				97619D241A5A184F00133E44 /* Move Zero to Right End.cpp */,
				97A4F10D1AF2CEDA00142761 /* Interleave Positive Negative Num.cpp */,
			);
			name = "Slow Fast Pointer";
			sourceTree = "<group>";
		};
		E3336FDF1CB035D400728057 /* 新的小班 */ = {
			isa = PBXGroup;
			children = (
				E350ACEF1CD683F100DEE037 /* Hybrid Data Structure */,
				E3B15A001CC86F3E005D0E22 /* DP, BFS */,
				E3336FEE1CB1DABF00728057 /* 中心开花 */,
				E3336FE01CB035FC00728057 /* Most Frequent Nums in Real Time.cpp */,
				E3336FE41CB0452900728057 /* Lowest Common Ancestor in K nary Tree.cpp */,
				E3336FE61CB04A8700728057 /* Implement MaxStack.cpp */,
				E3CDE6201CC2AA2A008C0F71 /* Deep Iterator.cpp */,
				E3CDE6221CC2B850008C0F71 /* Has Triangle.cpp */,
				E3CDE6241CC2B879008C0F71 /* Interval Coverage.cpp */,
				E3B15A031CCBEFD2005D0E22 /* Word Distance.cpp */,
				E3B15A051CCBF3B7005D0E22 /* Square Root.cpp */,
				E350ACEB1CD5B31A00DEE037 /* Find the Celebrity.cpp */,
				E350ACED1CD5C5E300DEE037 /* Influencer Finder.cpp */,
				E350ACF61CD6F8C100DEE037 /* Huffman Encoding.cpp */,
				E350ACF81CD7055900DEE037 /* Cut Wood.cpp */,
			);
			name = "新的小班";
			sourceTree = "<group>";
		};
		E3336FEE1CB1DABF00728057 /* 中心开花 */ = {
			isa = PBXGroup;
			children = (
				E3336FEF1CB1DB0600728057 /* File */,
				E3336FF01CB1DBB500728057 /* Trapping Rain Water 1-d Array.cpp */,
				E3336FF21CB1DCFA00728057 /* Replace Elem with Multip of All Other Elems.cpp */,
				E3336FF41CB1DF9C00728057 /* Largest Rectangle in Histogram.cpp */,
				E3336FF61CB1E02200728057 /* Next Taller Person.cpp */,
				E3336FF81CB1E12C00728057 /* Min Num of Replacements to Seperate Elem.cpp */,
				E3336FFA1CB1E24900728057 /* Is Exist i j k When a[i]<a[j]<a[k].cpp */,
				E3336FFC1CB1E28C00728057 /* Num of i j k When a[i]<a[j]<a[k].cpp */,
			);
			name = "中心开花";
			sourceTree = "<group>";
		};
		E340BCBC1CF4A2EA002E8A46 /* Graph */ = {
			isa = PBXGroup;
			children = (
				E340BCBD1CF572A7002E8A46 /* Graph Basic */,
				E340BCBE1CF750E2002E8A46 /* PreOrder Traverse Graph.cpp */,
				E340BCC01CF75B57002E8A46 /* PostOrder Traverse Graph.cpp */,
				E3F756851CEBD204000765A8 /* Get Dot Product.cpp */,
				E3B46B811CFF661E008D8E99 /* Celebrity Problem.cpp */,
			);
			name = Graph;
			sourceTree = "<group>";
		};
		E350ACEF1CD683F100DEE037 /* Hybrid Data Structure */ = {
			isa = PBXGroup;
			children = (
				E350ACFC1CD72AE100DEE037 /* Hybrid Data Structure */,
				E350ACF01CD6845700DEE037 /* HB PriorityQueue.cpp */,
				E350ACFA1CD72AAF00DEE037 /* Implement ID Pool.cpp */,
			);
			name = "Hybrid Data Structure";
			sourceTree = "<group>";
		};
		E3B15A001CC86F3E005D0E22 /* DP, BFS */ = {
			isa = PBXGroup;
			children = (
				E3B15A011CC86FDF005D0E22 /* Contain Increasing subsequence.cpp */,
			);
			name = "DP, BFS";
			sourceTree = "<group>";
		};
		E3CDE5E01CBAFBF9008C0F71 /* Basic Operations */ = {
			isa = PBXGroup;
			children = (
				97D303F11A82DED300D60E6C /* Search Node in BST.cpp */,
				974D5B8B1A5C6C93009A6D35 /* Insert Node in BST.cpp */,
				974D5B891A5C6C7E009A6D35 /* Remove Node in BST.cpp */,
				97DFBE691B33A5740039800D /* Binary Search Tree Iterator.cpp */,
				97D303F41A8317B900D60E6C /* Pre-order traverse.cpp */,
				97D303F61A83189700D60E6C /* In-order traverse.cpp */,
				97D303F81A8318A600D60E6C /* Post-order traverse.cpp */,
			);
			name = "Basic Operations";
			sourceTree = "<group>";
		};
		E3CDE5E51CBAFCBA008C0F71 /* Close Num in BST */ = {
			isa = PBXGroup;
			children = (
				971C56761A5B7045001E0315 /* Closest Number in BST.cpp */,
				971C56791A5B7093001E0315 /* Largest Number Smaller in BST.cpp */,
				97D303EF1A82D6D000D60E6C /* Smallest Num Larger in BST.cpp */,
				E3CDE5E31CBAFC84008C0F71 /* Second Largest Num in BST.cpp */,
				97DFBE361B31DF9F0039800D /* kth Smallest in BST.cpp */,
				E3CDE5E61CBAFD26008C0F71 /* Two Closest Num to Target.cpp */,
				97DFBE7B1B3628920039800D /* k Closest to Target.cpp */,
			);
			name = "Close Num in BST";
			sourceTree = "<group>";
		};
		E3CDE5F21CBB05A6008C0F71 /* BST vs Sorted Arr */ = {
			isa = PBXGroup;
			children = (
				E3CDE5E81CBAFD58008C0F71 /* 2 Sum in BST.cpp */,
				E3CDE5EC1CBAFDBD008C0F71 /* Recover BST if Two Nodes Swapped.cpp */,
				E3CDE5EA1CBAFD98008C0F71 /* Most Frequent Num in BST.cpp */,
				E3CDE5EE1CBAFDE8008C0F71 /* Divide BST into Two Seperate BSTs.cpp */,
			);
			name = "BST vs Sorted Arr";
			sourceTree = "<group>";
		};
		E3CDE6101CBE9695008C0F71 /* View of Binary Tree */ = {
			isa = PBXGroup;
			children = (
				97D02B7D1AB767AF00C73F56 /* Top View of Binary Tree.cpp */,
				E350AD0C1CDB1F7F00DEE037 /* Left View of Binary Tree.cpp */,
				97AF0E481AA7ACC5003EA180 /* Right View of BT.cpp */,
				97DFBE791B361E0A0039800D /* Border View of Binary Tree.cpp */,
			);
			name = "View of Binary Tree";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		97619D121A58E9B500133E44 /* LaiOffer */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 97619D1A1A58E9B500133E44 /* Build configuration list for PBXNativeTarget "LaiOffer" */;
			buildPhases = (
				97619D0F1A58E9B500133E44 /* Sources */,
				97619D101A58E9B500133E44 /* Frameworks */,
				97619D111A58E9B500133E44 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = LaiOffer;
			productName = LaiOffer;
			productReference = 97619D131A58E9B500133E44 /* LaiOffer */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		97619D0B1A58E9B500133E44 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0610;
				ORGANIZATIONNAME = "Fang Liu";
				TargetAttributes = {
					97619D121A58E9B500133E44 = {
						CreatedOnToolsVersion = 6.1.1;
					};
				};
			};
			buildConfigurationList = 97619D0E1A58E9B500133E44 /* Build configuration list for PBXProject "LaiOffer" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = 97619D0A1A58E9B500133E44;
			productRefGroup = 97619D141A58E9B500133E44 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				97619D121A58E9B500133E44 /* LaiOffer */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		97619D0F1A58E9B500133E44 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				979A93811AB411A7007DE692 /* Buy StockII.cpp in Sources */,
				971C565D1A5A51A0001E0315 /* unknown size binary search.cpp in Sources */,
				97D303F01A82D6D000D60E6C /* Smallest Num Larger in BST.cpp in Sources */,
				979A93761AB3E0C8007DE692 /* Largest Cross 1s.cpp in Sources */,
				97DFBE821B37BE870039800D /* Combination Sum II.cpp in Sources */,
				E350AD041CD9BFFC00DEE037 /* Odd Even Linked List.cpp in Sources */,
				97B423231B4B24C300B8F329 /* Bubble Sort.cpp in Sources */,
				97D6AC631AD5C24C007F28C7 /* Is Completed Binary Tree.cpp in Sources */,
				97D02B961AB76D9D00C73F56 /* Two Nums with Same Diff to Target.cpp in Sources */,
				E3336FF11CB1DBB500728057 /* Trapping Rain Water 1-d Array.cpp in Sources */,
				97D30D601A89608B00FAC61A /* 3Sum Closest.cpp in Sources */,
				97D02B9C1AB76F7800C73F56 /* Max Product Subarr.cpp in Sources */,
				97DFBE6A1B33A5740039800D /* Binary Search Tree Iterator.cpp in Sources */,
				974D5B961A5CE809009A6D35 /* Decompress String I.cpp in Sources */,
				97D02B751AB6930F00C73F56 /* Intersection of Two Lists.cpp in Sources */,
				97895D251B1FAA8C00C33E15 /* Eight Queens.cpp in Sources */,
				97CA538B1AA40ADF0056534F /* Add Binary.cpp in Sources */,
				97D74FD31AF47CF400EE657D /* Swap Two Nodes in List.cpp in Sources */,
				971C564C1A5A24E8001E0315 /* Rainbow Sort.cpp in Sources */,
				979A936E1AB3A5D4007DE692 /* Largest Sum of Subarr.cpp in Sources */,
				E340BCC11CF75B57002E8A46 /* PostOrder Traverse Graph.cpp in Sources */,
				97619D231A599DFC00133E44 /* Quick Sort Array.cpp in Sources */,
				97080B351A6F7C06007B809D /* Remove Dup in Sorted Arr keep one.cpp in Sources */,
				97B423291B4C92C800B8F329 /* print Last K Lines in File.cpp in Sources */,
				97D303FC1A83557600D60E6C /* Symmetric Binary Tree.cpp in Sources */,
				97D02BBC1AB773F600C73F56 /* All Paths Sum to Target in BT.cpp in Sources */,
				97A4F1181AF3008500142761 /* Longest Sublist without Dup Nodes.cpp in Sources */,
				97D6AC5F1AD5A10F007F28C7 /* Max Heap.cpp in Sources */,
				E3CDE5EB1CBAFD98008C0F71 /* Most Frequent Num in BST.cpp in Sources */,
				97080B2B1A6EFDA2007B809D /* Top K Frequent Words.cpp in Sources */,
				97D303E61A81A6F100D60E6C /* Lowest Common Ancestor has Parent.cpp in Sources */,
				97080B331A6F6C57007B809D /* Reverse Words in Sentence.cpp in Sources */,
				971C566F1A5B5DDB001E0315 /* Deep Copy Skip List.cpp in Sources */,
				97CA53811AA2C9570056534F /* Search for a Range.cpp in Sources */,
				E3336FE11CB035FC00728057 /* Most Frequent Nums in Real Time.cpp in Sources */,
				97CA539B1AA410670056534F /* Length of Last Word.cpp in Sources */,
				97C3FA561ACE07DC00573E43 /* Max Sum Any to Any(Root to Leaf).cpp in Sources */,
				97895D291B1FEEC200C33E15 /* Next Permutation.cpp in Sources */,
				97D303FE1A83565C00D60E6C /* Same Binary Tree.cpp in Sources */,
				97D02B8C1AB76B5E00C73F56 /* All Subsequence From String.cpp in Sources */,
				97BEF4841A733E7D00FDB6DA /* 2Sum All Pair Find Index.cpp in Sources */,
				97D02B591AB53B4200C73F56 /* Reconstruct BST with Pre Order Traversal.cpp in Sources */,
				97D02BC61AB7762600C73F56 /* Is in Sorted 2D Arr.cpp in Sources */,
				97B4231A1B49CA4B00B8F329 /* Create LinkedList on Each Level.cpp in Sources */,
				97D02BD21AB7782500C73F56 /* 3Sum Less.cpp in Sources */,
				97E24B351B26B260000AEE2E /* Valid UTF-8.cpp in Sources */,
				97D02B9E1AB76FAF00C73F56 /* Matrix Water.cpp in Sources */,
				97895D0E1B17D49E00C33E15 /* Find Max in Sorted Reversed Arr.cpp in Sources */,
				97DFBE371B31DF9F0039800D /* kth Smallest in BST.cpp in Sources */,
				974D5B941A5CD6C5009A6D35 /* Height of Binary Tree.cpp in Sources */,
				974D5BAA1A5E77A2009A6D35 /* Swap Pair Nodes in Linked List.cpp in Sources */,
				97DFBE291B2FD12E0039800D /* Remove Nodes Outside of Range.cpp in Sources */,
				974D5B8C1A5C6C93009A6D35 /* Insert Node in BST.cpp in Sources */,
				97D303F21A82DED300D60E6C /* Search Node in BST.cpp in Sources */,
				97D02B711AB691EE00C73F56 /* Rotate List.cpp in Sources */,
				97DFBE2D1B2FD9A20039800D /* Heapify Complete Binary Tree.cpp in Sources */,
				971C56731A5B6FCF001E0315 /* Merge K Sorted Arr.cpp in Sources */,
				97D02BB61AB7733500C73F56 /* Find Distance Between Two Nodes in BT.cpp in Sources */,
				97E24B471B2CB9B4000AEE2E /* Lowest Common Ancestor of BST.cpp in Sources */,
				97895D081B17C11E00C33E15 /* Smallest Larger Than Target.cpp in Sources */,
				97080B041A688D3D007B809D /* Str to Hex Int.cpp in Sources */,
				97CA53AD1AA64D740056534F /* Spiral Order Generate II.cpp in Sources */,
				97D02B631AB68E9000C73F56 /* Add Two ListsI.cpp in Sources */,
				97D6AC501AD454DD007F28C7 /* Intersection in Linked List.cpp in Sources */,
				97E24B491B2CC045000AEE2E /* Distance btw Closet Leaf Node and Target.cpp in Sources */,
				97DFBE4C1B3259180039800D /* Quick Select Arr.cpp in Sources */,
				97CA53991AA40FE40056534F /* Valid Parentheses.cpp in Sources */,
				97AF0E4F1AA84E88003EA180 /* Find Words Cycle.cpp in Sources */,
				97D6AC561AD45FF4007F28C7 /* Longest Path in BT.cpp in Sources */,
				97080B071A6AFEA5007B809D /* Max Elem in Window.cpp in Sources */,
				97080AF31A65BB72007B809D /* Longest Length Product.cpp in Sources */,
				97D303E21A819E2D00D60E6C /* Level Order Traverse Binary Tree.cpp in Sources */,
				979537941B44C0AB002183CF /* Compress Str.cpp in Sources */,
				97D02B861AB7698B00C73F56 /* Count Num of Words in String.cpp in Sources */,
				978AAA4B1A9D8C1900ED046A /* Remove Particular Chars From String.cpp in Sources */,
				97E24B3F1B27AAF0000AEE2E /* Swap Back Value based on Position.cpp in Sources */,
				97E24B411B27DC96000AEE2E /* Parsing Message Format.cpp in Sources */,
				97D30D661A8FCE1400FAC61A /* permutation no dup.cpp in Sources */,
				972959801A79C99400C8BC04 /* Mid Node of Linked List.cpp in Sources */,
				E37EFF621D47F78500B50582 /* Buy StockIII.cpp in Sources */,
				974D5BA51A5E0C0A009A6D35 /* Merge Two Sorted Linked Lists.cpp in Sources */,
				E3336FFE1CB1E28C00728057 /* Num of i j k When a[i]<a[j]<a[k].cpp in Sources */,
				971C566B1A5B4C67001E0315 /* Total Occurrence.cpp in Sources */,
				97A4F1001AF1A69B00142761 /* Pascal's Trangle II.cpp in Sources */,
				97D303E01A81995B00D60E6C /* ZigZag Traverse Binary Tree.cpp in Sources */,
				97D02B841AB768D900C73F56 /* Connect Right NULL Child to inorder Successor.cpp in Sources */,
				97DFBE781B3614AB0039800D /* Permutations.cpp in Sources */,
				E340BCBF1CF750E2002E8A46 /* PreOrder Traverse Graph.cpp in Sources */,
				97D02B981AB76EB100C73F56 /* Bottom View of Binary Tree.cpp in Sources */,
				97895D131B19038F00C33E15 /* Num of Values Smaller than Target in Young's Matrix.cpp in Sources */,
				E3CDE6231CC2B850008C0F71 /* Has Triangle.cpp in Sources */,
				974D5B9C1A5CE963009A6D35 /* String Replace.cpp in Sources */,
				97080B1A1A6C76C2007B809D /* Most Points on a Line.cpp in Sources */,
				97895D1F1B1BE4CE00C33E15 /* Find Two Repeating Num(1-N).cpp in Sources */,
				97DFBE7A1B361E0A0039800D /* Border View of Binary Tree.cpp in Sources */,
				97D02B6D1AB6912700C73F56 /* Remove Nth From End of List.cpp in Sources */,
				97A4F0FC1AEF2F1A00142761 /* Sort by 3 Stacks.cpp in Sources */,
				97D02BCE1AB7776D00C73F56 /* Closet K Points to Origin.cpp in Sources */,
				978AAA441A9CE7F700ED046A /* Remove Adjacent Repeated Chars III.cpp in Sources */,
				97080B3F1A709296007B809D /* is Substring.cpp in Sources */,
				97D02B8E1AB76BA800C73F56 /* All Combination of Factor could Multiply to Target.cpp in Sources */,
				97619D211A590B1B00133E44 /* Merge Sort Array.cpp in Sources */,
				97D02BA41AB7703B00C73F56 /* Longest Bitonic Subsequence.cpp in Sources */,
				E3F756861CEBD204000765A8 /* Get Dot Product.cpp in Sources */,
				97895D301B20D66000C33E15 /* Biggest Product of 3 Nums.cpp in Sources */,
				97B423211B4A230600B8F329 /* Climb Stairs.cpp in Sources */,
				97D30D641A8FA9B200FAC61A /* subset no dup.cpp in Sources */,
				97D02B6F1AB6917E00C73F56 /* Find Nth Node From End of List.cpp in Sources */,
				97DFBE2B1B2FD5CA0039800D /* Remove Trailing Zero Nodes.cpp in Sources */,
				97CA539F1AA445370056534F /* Longest Substr Without Repeated Chars.cpp in Sources */,
				97CA53A71AA63CAA0056534F /* x^x.cpp in Sources */,
				97619D251A5A184F00133E44 /* Move Zero to Right End.cpp in Sources */,
				97D02B731AB6928100C73F56 /* Merge Two Lists Alternatively.cpp in Sources */,
				97D02B9A1AB76F4D00C73F56 /* Wether Edges could Form a Tree.cpp in Sources */,
				974D5B9A1A5CE8D2009A6D35 /* Compress String.cpp in Sources */,
				97D6AC581AD4E2AA007F28C7 /* Quick Sort Linked List.cpp in Sources */,
				E30EE2CC1D4674DF00FCAFFF /* Triangle.cpp in Sources */,
				97CA53A91AA646460056534F /* Spiral Order Traverse I.cpp in Sources */,
				97D02BAE1AB7721D00C73F56 /* All Combination of K Elem in Arr.cpp in Sources */,
				E3AC0D8D1D3F4B9300CE7A16 /* 4Sum.cpp in Sources */,
				972959881A7AEFC000C8BC04 /* Partition Linked List.cpp in Sources */,
				97DFBE5E1B333A650039800D /* Contains Duplicate.cpp in Sources */,
				97DEC4C01B2E336900238313 /* Print List Reverse Order.cpp in Sources */,
				E3336FE71CB04A8800728057 /* Implement MaxStack.cpp in Sources */,
				97D02B801AB7682700C73F56 /* Divide Set into Two Subset with Min diff of Sum.cpp in Sources */,
				971C56751A5B700D001E0315 /* Merge K Sorted Lists.cpp in Sources */,
				972959821A79C9E600C8BC04 /* Check Cycle and Find Cycle.cpp in Sources */,
				97CA53951AA40F040056534F /* Valid Palindrome.cpp in Sources */,
				97A4F1081AF1F55900142761 /* Single Num.cpp in Sources */,
				97BEF4931A75AF8900FDB6DA /* Inversion Pair in Array.cpp in Sources */,
				97895D0A1B17C56000C33E15 /* Largest Smaller Than Target.cpp in Sources */,
				97DFBE581B332D9B0039800D /* find k-th Largest Element in Unsorted Arr.cpp in Sources */,
				97CA53A31AA626C60056534F /* Get Left Subtree Nodes.cpp in Sources */,
				97D02BC81AB7766100C73F56 /* Common Elem in 2D Sorted Arr.cpp in Sources */,
				973035A71B535F9A000DC652 /* Word Search.cpp in Sources */,
				97CA53A51AA62DF20056534F /* String Matching.cpp in Sources */,
				972959861A7A164300C8BC04 /* 2D Binary Search.cpp in Sources */,
				97080B131A6C702B007B809D /* Reconstruct Bianry Tree With pre_in Order.cpp in Sources */,
				974D5B7F1A5B70C7009A6D35 /* Deep Copy Undirectd Graph.cpp in Sources */,
				97DFBE601B333E250039800D /* Contains Duplicate II.cpp in Sources */,
				97EA66341B3A49C300F14235 /* Longest Increasing Subpath in Binary Tree.cpp in Sources */,
				97080B151A6C70E7007B809D /* Reconstruct Binary Tree With post_in Order.cpp in Sources */,
				E350AD0D1CDB1F7F00DEE037 /* Left View of Binary Tree.cpp in Sources */,
				97D02BB41AB7730600C73F56 /* Convert BT to DLL.cpp in Sources */,
				E350ACFB1CD72AAF00DEE037 /* Implement ID Pool.cpp in Sources */,
				97D02B781AB7666900C73F56 /* Merge Overlapping Intervals.cpp in Sources */,
				97CA53831AA2FB040056534F /* Find Peak Num.cpp in Sources */,
				97CA53971AA40F450056534F /* String to Int.cpp in Sources */,
				97D303EC1A81D4AF00D60E6C /* Spiral Order Generate I.cpp in Sources */,
				974D5BBB1A61DD97009A6D35 /* Longest Distance Leaf to Leaf.cpp in Sources */,
				97DFBE451B3246040039800D /* Sort Letter by Case.cpp in Sources */,
				E350ACF11CD6845700DEE037 /* HB PriorityQueue.cpp in Sources */,
				E3CDE60D1CBE9470008C0F71 /* Has Sum Root To Leaf.cpp in Sources */,
				97D6AC651AD61DE9007F28C7 /* Hex for Int.cpp in Sources */,
				979A93831AB4FE44007DE692 /* Shuffle Array.cpp in Sources */,
				979A936C1AB3A591007DE692 /* Min Number of Jumps.cpp in Sources */,
				97D304051A86AA7600D60E6C /* Stack with Min().cpp in Sources */,
				E3CDE5FF1CBCC0EB008C0F71 /* Sum Root To Leaf Numbers.cpp in Sources */,
				97CA53871AA407410056534F /* Pascal's Trangle.cpp in Sources */,
				97D6AC521AD45EBC007F28C7 /* Convert Sorted Arr to BST.cpp in Sources */,
				971C565B1A5A4DB5001E0315 /* K Closet Elems in Sorted Arr.cpp in Sources */,
				97D320C01B55C947005A3C2B /* Hash Table.cpp in Sources */,
				979A93721AB3BF1C007DE692 /* Longest Consecutive 1s.cpp in Sources */,
				97E24B371B26B4DC000AEE2E /* Read 4096 Bytes.cpp in Sources */,
				E3CDE5ED1CBAFDBD008C0F71 /* Recover BST if Two Nodes Swapped.cpp in Sources */,
				97D30D5E1A88426000FAC61A /* Missing One in Unsorted Arr(1-N).cpp in Sources */,
				97080B2D1A6F5B6B007B809D /* Encode Space.cpp in Sources */,
				E350ACF51CD6F84400DEE037 /* Sort k-diff Sorted Arr.cpp in Sources */,
				E3D583721CE2A92D00BE4A97 /* Product of Array Except Self.cpp in Sources */,
				97D303DC1A7DC0A100D60E6C /* All Unique Chars.cpp in Sources */,
				97D30D621A8960F300FAC61A /* Print Matrix Clockwise.cpp in Sources */,
				E3336FFB1CB1E24900728057 /* Is Exist i j k When a[i]<a[j]<a[k].cpp in Sources */,
				97D6AC541AD45FB4007F28C7 /* Design Text Editor.cpp in Sources */,
				97080B171A6C714C007B809D /* Reconstruct Binary Tree With level_in Order.cpp in Sources */,
				9765FB621AB29C2900489CC0 /* Fibonacci.cpp in Sources */,
				97895D1D1B1A89D900C33E15 /* Sort Arr based on Occurrence.cpp in Sources */,
				E37EFF721D4948B500B50582 /* Unique Paths.cpp in Sources */,
				E350ACF91CD7055900DEE037 /* Cut Wood.cpp in Sources */,
				97D02BA21AB7700A00C73F56 /* Count Nodes in Given Range in BST.cpp in Sources */,
				97E73BC11AD7140F00F69625 /* Median of Two Arr.cpp in Sources */,
				97DEC4CD1B2E605500238313 /* Add Two ListsII.cpp in Sources */,
				978712B41AE2D66E00957360 /* Q1.cpp in Sources */,
				97DFBE7C1B3628920039800D /* k Closest to Target.cpp in Sources */,
				97D74FCF1AF3DF7F00EE657D /* STRING.cpp in Sources */,
				971C567A1A5B7093001E0315 /* Largest Number Smaller in BST.cpp in Sources */,
				971C56771A5B7045001E0315 /* Closest Number in BST.cpp in Sources */,
				97A4F0FE1AF1997900142761 /* Plus One.cpp in Sources */,
				97A4F1141AF2EB1700142761 /* Find Max in Increase Decrease Arr.cpp in Sources */,
				97B423131B49AC1800B8F329 /* Sort One Stack.cpp in Sources */,
				978712BA1AE2E53000957360 /* Q4.cpp in Sources */,
				978712B81AE2E16A00957360 /* Q3.cpp in Sources */,
				97457E031ADCA9D8007A07A6 /* Edit Distance.cpp in Sources */,
				97080B391A6F8087007B809D /* Remove Dup in Sorted Arr keep none.cpp in Sources */,
				E3336FF31CB1DCFA00728057 /* Replace Elem with Multip of All Other Elems.cpp in Sources */,
				97DFBE6E1B34B43E0039800D /* Letter Combinations of a Phone Number.cpp in Sources */,
				97B423271B4C6F9000B8F329 /* get Rank of Num.cpp in Sources */,
				97BEF4911A748C8A00FDB6DA /* 3Sum Find Value.cpp in Sources */,
				971C56671A5B4C42001E0315 /* search in shifted sorted arr II.cpp in Sources */,
				97A4F1021AF1AD3400142761 /* Missing Range.cpp in Sources */,
				E3CDE5E91CBAFD58008C0F71 /* 2 Sum in BST.cpp in Sources */,
				978AAA421A9CDD4500ED046A /* Remove Space in String.cpp in Sources */,
				E37EFF6A1D4864C300B50582 /* Mininum Path Sum.cpp in Sources */,
				974D5B9F1A5DF89F009A6D35 /* Find Node with Max Diff Subtree.cpp in Sources */,
				97EED44A1A91BD5F0094BB6C /* Most Frequent Words.cpp in Sources */,
				97D02B651AB68F1A00C73F56 /* Reverse Part of List.cpp in Sources */,
				974D5BB91A61DBBB009A6D35 /* Has Sum Any to Any(Root to Leaf).cpp in Sources */,
				97DFBE681B339DDE0039800D /* Largest Number.cpp in Sources */,
				976D3F281AD212320033B750 /* Isomorphic str.cpp in Sources */,
				97D02BB01AB7729B00C73F56 /* Positive Negative Alternatively.cpp in Sources */,
				97EED4461A91706E0094BB6C /* Combinations Of Coins.cpp in Sources */,
				97D6AC4E1AD453F4007F28C7 /* Linked List Cycle.cpp in Sources */,
				97EA66381B3B48FA00F14235 /* Reverse Integer.cpp in Sources */,
				971C565F1A5B4BD7001E0315 /* Merge Sort Linked List.cpp in Sources */,
				97895D211B1BE7C600C33E15 /* First Missing Positive.cpp in Sources */,
				E350AD091CDABF5D00DEE037 /* Change Node Value in BST.cpp in Sources */,
				E3D583791CE44A2E00BE4A97 /* Word Pattern.cpp in Sources */,
				97D02BCA1AB776F600C73F56 /* Diagonal Sum of BT.cpp in Sources */,
				E3CDE5E41CBAFC84008C0F71 /* Second Largest Num in BST.cpp in Sources */,
				97D02B7A1AB766FE00C73F56 /* Pattern Matche.cpp in Sources */,
				97B4230A1B48616000B8F329 /* Num of Possible Triangles.cpp in Sources */,
				97080AF91A65CA5E007B809D /* Shortest Path in Gym.cpp in Sources */,
				97CA53AF1AA68D4C0056534F /* Array Deduplication.cpp in Sources */,
				97D304071A86AB8D00D60E6C /* Sort With 3 Stacks.cpp in Sources */,
				973AA1311AA6B87C00C17790 /* Median Tracker.cpp in Sources */,
				974D5B901A5C6DC4009A6D35 /* Max Sum Leaf to Leaf.cpp in Sources */,
				E3CDE5EF1CBAFDE8008C0F71 /* Divide BST into Two Seperate BSTs.cpp in Sources */,
				E3CDE6211CC2AA2A008C0F71 /* Deep Iterator.cpp in Sources */,
				97895D2E1B201DFC00C33E15 /* All exist Three times but One Num.cpp in Sources */,
				97D74FD51AF55D1C00EE657D /* Distance btw Two Nodes.cpp in Sources */,
				979A937B1AB3F47D007DE692 /* Largest Sum Submatrix.cpp in Sources */,
				97DFBE841B38AA540039800D /* Combinations.cpp in Sources */,
				97B4230F1B49993A00B8F329 /* Use Arr build Stack.cpp in Sources */,
				97DFBE561B332D800039800D /* find k-th Smallest Element in Unsorted Arr.cpp in Sources */,
				971C56651A5B4C2B001E0315 /* search in shifted sorted arr I.cpp in Sources */,
				97D02B691AB6906100C73F56 /* Remove Dup in Sorted List II.cpp in Sources */,
				974D5B831A5BAF07009A6D35 /* Longest Common Subsequence btw two strings.cpp in Sources */,
				97D967781AFDB48900C152EA /* Print All Valid Parentheses.cpp in Sources */,
				97D02B941AB76D3400C73F56 /* Find Only One Dup Num.cpp in Sources */,
				97B423181B49B58400B8F329 /* Sorted Arr to BST.cpp in Sources */,
				E3336FF51CB1DF9C00728057 /* Largest Rectangle in Histogram.cpp in Sources */,
				97CA53931AA40E2F0056534F /* Longest Common Prefix.cpp in Sources */,
				9729598A1A7AF04500C8BC04 /* Queue by Two Stacks.cpp in Sources */,
				E37EFF6E1D48708800B50582 /* Unique Path Sum.cpp in Sources */,
				E3CDE60F1CBE948E008C0F71 /* Find Sum Root To Leaf.cpp in Sources */,
				97080B241A6DEAFE007B809D /* Reorder Linked List.cpp in Sources */,
				97C30C461B0FF78E00C2CE98 /* Inheritance.cpp in Sources */,
				974D5BAE1A60894B009A6D35 /* Keep Nodes Within Range.cpp in Sources */,
				97DFBE621B334B2B0039800D /* Contains Duplicate III.cpp in Sources */,
				97D02BC01AB774C600C73F56 /* Nested Int Weighted Sum.cpp in Sources */,
				97080AF71A65BD17007B809D /* K-th Closest.cpp in Sources */,
				97D02B5F1AB66F2B00C73F56 /* 2Sum 2 Arrays.cpp in Sources */,
				E3B15A061CCBF3B7005D0E22 /* Square Root.cpp in Sources */,
				97AD03101AF6E82D00703834 /* Delete Node in List.cpp in Sources */,
				97D30D5C1A88105B00FAC61A /* Evaluate Reverse Polish Notation.cpp in Sources */,
				E37EFF841D52C3FF00B50582 /* Intersection of Two Arrays.cpp in Sources */,
				E350AD001CD8041500DEE037 /* Find Insert Position hasDup.cpp in Sources */,
				97D303D81A7C42F800D60E6C /* K-th Smallest Sum in Two Sorted Arr.cpp in Sources */,
				97EA66361B3A5B2A00F14235 /* Shortest List of Integer.cpp in Sources */,
				97D02B611AB66FC100C73F56 /* 3Sum 3 Arrays.cpp in Sources */,
				E3CDE5E71CBAFD26008C0F71 /* Two Closest Num to Target.cpp in Sources */,
				97E24B451B2CAEA5000AEE2E /* Replace to get Longest Continuous Subarr.cpp in Sources */,
				97AD03131AF9B7C700703834 /* Subarr Sum.cpp in Sources */,
				974D5B851A5BAF2B009A6D35 /* Longest Common Substring btw two strings.cpp in Sources */,
				974D5BA31A5E0A26009A6D35 /* Insert in Sorted Linked List.cpp in Sources */,
				E350ACEC1CD5B31A00DEE037 /* Find the Celebrity.cpp in Sources */,
				97DEC4C21B2E3AED00238313 /* Reverse Double Linked List.cpp in Sources */,
				97BEF48F1A74752100FDB6DA /* 2Sum Closest Find Value.cpp in Sources */,
				97D30D681A9040E600FAC61A /* subset has dup.cpp in Sources */,
				97DFBE741B34E87D0039800D /* Min Size Subarray Sum.cpp in Sources */,
				97D02BD01AB777F200C73F56 /* All Permutation of Str after insert Empty Space.cpp in Sources */,
				97E24B3D1B2797A5000AEE2E /* Missing One in Sorted Arr(1-N).cpp in Sources */,
				97D02B921AB76CF300C73F56 /* Get Count of Right Smaller Nums.cpp in Sources */,
				978712B61AE2DDA500957360 /* Q2.cpp in Sources */,
				E3B15A021CC86FDF005D0E22 /* Contain Increasing subsequence.cpp in Sources */,
				97080B311A6F6379007B809D /* Remove Adjacent Repeated CharII.cpp in Sources */,
				97DFBE641B334E160039800D /* House Robber.cpp in Sources */,
				97895D271B1FCEA500C33E15 /* Arrange to Form Biggest Num.cpp in Sources */,
				97D02B671AB68FD700C73F56 /* Remove Dup in Sorted List.cpp in Sources */,
				97895D191B1A7A6C00C33E15 /* Check Has Triangle.cpp in Sources */,
				979A937F1AB41138007DE692 /* Buy StockI.cpp in Sources */,
				E3D583701CE2A1FC00BE4A97 /* Summary Ranges.cpp in Sources */,
				97B4231C1B49E7D800B8F329 /* All Paths Sum to Target.cpp in Sources */,
				97D74FD71AF563CA00EE657D /* Subset Sum.cpp in Sources */,
				97AF0E491AA7ACC5003EA180 /* Right View of BT.cpp in Sources */,
				97080B221A6C78F7007B809D /* Disjoint White Objects.cpp in Sources */,
				97080B1E1A6C77FA007B809D /* Search Suggestion System.cpp in Sources */,
				97DFBE801B378F2E0039800D /* Combination Sum.cpp in Sources */,
				E3CDE6251CC2B879008C0F71 /* Interval Coverage.cpp in Sources */,
				97080B091A6B1AF4007B809D /* First Non-Repeating Char in Stream.cpp in Sources */,
				9765FB681AB2C08500489CC0 /* Jump Game_jump to end or not.cpp in Sources */,
				971C564A1A5A2122001E0315 /* remove element.cpp in Sources */,
				E3336FE51CB0452900728057 /* Lowest Common Ancestor in K nary Tree.cpp in Sources */,
				971C56551A5A3E5A001E0315 /* First Occurrence Elem.cpp in Sources */,
				E3336FF91CB1E12C00728057 /* Min Num of Replacements to Seperate Elem.cpp in Sources */,
				97A4F10C1AF2C97000142761 /* Partition Arr.cpp in Sources */,
				97A4F10E1AF2CEDA00142761 /* Interleave Positive Negative Num.cpp in Sources */,
				973035A51B519F56000DC652 /* Longest subArr have Even 0 1.cpp in Sources */,
				E37EFF741D4948C400B50582 /* Unique Paths II.cpp in Sources */,
				97080B2F1A6F5BCB007B809D /* Remove Adjacent Repeated Char.cpp in Sources */,
				97EED4481A91B0160094BB6C /* permutation with dup.cpp in Sources */,
				97CA538F1AA40CA00056534F /* Count and Say.cpp in Sources */,
				974D5BAC1A5E823C009A6D35 /* Reverse Binary Tree.cpp in Sources */,
				978AAA401A9CD8C200ED046A /* Most Frequent Char in String.cpp in Sources */,
				974D5B8E1A5C6D74009A6D35 /* Is Balanced Bianry Tree.cpp in Sources */,
				97A4F1041AF1D52D00142761 /* sqrt.cpp in Sources */,
				971C56691A5B4C50001E0315 /* Min in Rotated Sorted Arr.cpp in Sources */,
				97E24B431B27FD21000AEE2E /* Nums of Combination of Coins.cpp in Sources */,
				979A93701AB3AE75007DE692 /* Longest Increasing Subsequence.cpp in Sources */,
				97080B411A70AB1B007B809D /* Deduplicate Same Adj Char.cpp in Sources */,
				97D02BB81AB7738900C73F56 /* Str Chained Form a Circle.cpp in Sources */,
				97895D151B197EC000C33E15 /* First Non-Repeat Char in String.cpp in Sources */,
				97D303EA1A81BE6500D60E6C /* Lowest Common Ancestor IV.cpp in Sources */,
				9765FB661AB2BF6700489CC0 /* Maximal Product When Cutting Rope.cpp in Sources */,
				97DFBE331B31DB7E0039800D /* All Visible Nodes.cpp in Sources */,
				97D9677B1B00122400C152EA /* Common Elem in 3 Sorted Arr.cpp in Sources */,
				E350AD0F1CDB2E5E00DEE037 /* Visible Nodes.cpp in Sources */,
				97D02B7E1AB767AF00C73F56 /* Top View of Binary Tree.cpp in Sources */,
				97AF0E471AA7A581003EA180 /* Is Palindrome Linke List.cpp in Sources */,
				97B4231E1B4A0F1300B8F329 /* sum of All Digits.cpp in Sources */,
				979537911B44BC74002183CF /* Is Permutation Strings.cpp in Sources */,
				97D02BB21AB772D400C73F56 /* Get PostOrder from InOrder and Preorder from BT.cpp in Sources */,
				97895D321B20DE5200C33E15 /* 2Sum All Pair Find Value(has dup).cpp in Sources */,
				97E24B331B268E8B000AEE2E /* Delete Node which has One Child.cpp in Sources */,
				97DFBE6C1B349D2B0039800D /* Implement Trie (Prefix Tree).cpp in Sources */,
				97DFBE661B33624F0039800D /* 2Sum Data Structure Design.cpp in Sources */,
				971C564F1A5A30BE001E0315 /* Binary Search.cpp in Sources */,
				97CA538D1AA40C550056534F /* Compare Version Numbers.cpp in Sources */,
				97D74FD11AF3FD7C00EE657D /* first non repeat stream.cpp in Sources */,
				E350AD0B1CDACD2800DEE037 /* Sum of All Paths.cpp in Sources */,
				97EED4441A916AB70094BB6C /* Generate Parentheses .cpp in Sources */,
				97D02BA01AB76FE400C73F56 /* Find Lowest Node in Binary Tree.cpp in Sources */,
				97D02BC41AB775AA00C73F56 /* Reverse Alternate Nodes in List and Append at End.cpp in Sources */,
				E350ACE81CD586DB00DEE037 /* Graph Valid Tree.cpp in Sources */,
				978AAA481A9CF61D00ED046A /* 2D Liner Search.cpp in Sources */,
				97D02B901AB76C5E00C73F56 /* Find Order of Chars in Dic.cpp in Sources */,
				971C56531A5A3A17001E0315 /* pow.cpp in Sources */,
				97DFBE861B38B22C0039800D /* Combination Sum III.cpp in Sources */,
				97BEF48B1A74665F00FDB6DA /* 2Sum.cpp in Sources */,
				97DEC4B31B2DF7A100238313 /* Get Max Product Without One Num.cpp in Sources */,
				97CA53911AA40DC90056534F /* Longest Palindromic Substring.cpp in Sources */,
				97895D171B1A228800C33E15 /* Replace to get Longest Continuous Sequence.cpp in Sources */,
				E350ACF31CD6F72200DEE037 /* Find Smallest Range.cpp in Sources */,
				97CA53771AA290460056534F /* Rotate Array.cpp in Sources */,
				97895D0C1B17CD0C00C33E15 /* Find Local Min.cpp in Sources */,
				971C56591A5A4AA0001E0315 /* Closest Elem in Sorted Arr.cpp in Sources */,
				97B423111B49A64400B8F329 /* Set of Stacks.cpp in Sources */,
				97895D231B1F9B6D00C33E15 /* Num of Path Sum Root to Leaf.cpp in Sources */,
				97D02BAA1AB7719200C73F56 /* Has Subarr Sums to Target.cpp in Sources */,
				97D303E81A81BB5D00D60E6C /* Lowest Common Ancestor of K Nodes in BT.cpp in Sources */,
				97D02BBA1AB773B500C73F56 /* Is palindrom List.cpp in Sources */,
				97BEF48D1A746BDD00FDB6DA /* 2Sum All Pair Find Value(no dup).cpp in Sources */,
				E3B46B821CFF661F008D8E99 /* Celebrity Problem.cpp in Sources */,
				979A93741AB3DC81007DE692 /* Largest Square of 1s in Matrix.cpp in Sources */,
				E3CDE6191CC1428C008C0F71 /* Num of Valid Paretheses.cpp in Sources */,
				97457E051ADF4BB3007A07A6 /* Palindrome Num.cpp in Sources */,
				97895D101B17DFD800C33E15 /* Divide.cpp in Sources */,
				97080AF51A65BC92007B809D /* K-th Smallest Num in Function.cpp in Sources */,
				97619D171A58E9B500133E44 /* main.cpp in Sources */,
				979A93891AB53678007DE692 /* k-th Smallest Num with 3.5.7 Factor.cpp in Sources */,
				97895D061B16BE5A00C33E15 /* ID Pool Implementation.cpp in Sources */,
				E3336FF71CB1E02200728057 /* Next Taller Person.cpp in Sources */,
				9762EC821ACCCA6C00F95AB6 /* Max Sum Anynode to Anynode.cpp in Sources */,
				97D02BCC1AB7773000C73F56 /* Delete Node with Cost larger than K.cpp in Sources */,
				97080B261A6EE6EF007B809D /* K-th Smallest Num in Sorted Matrix.cpp in Sources */,
				979A93851AB507B6007DE692 /* Majority Num II.cpp in Sources */,
				97DFBE721B34D7B40039800D /* One Edit Distance.cpp in Sources */,
				97E24B3B1B2762E2000AEE2E /* K-th Permutation.cpp in Sources */,
				97457E071ADF5FF5007A07A6 /* Sort Arr by Frequency.cpp in Sources */,
				971C56571A5A44AD001E0315 /* Last Occurrence Elem.cpp in Sources */,
				97AF0E511AAD5946003EA180 /* Singleton.cpp in Sources */,
				97DEC4C51B2E403B00238313 /* Reverse Circular List.cpp in Sources */,
				97080B0B1A6B3798007B809D /* Majority Num.cpp in Sources */,
				976D3F261AD1CFC40033B750 /* is_cousin.cpp in Sources */,
				974D5B8A1A5C6C7E009A6D35 /* Remove Node in BST.cpp in Sources */,
				97895D2C1B20197100C33E15 /* All exist Twice but One Num.cpp in Sources */,
				97D303DA1A7CA7B600D60E6C /* Common Num in Unsorted Arr.cpp in Sources */,
				97DFBE541B3322680039800D /* 2Sum One pair Find Index Sorted Arr.cpp in Sources */,
				976D3F241AD1CF900033B750 /* 2Sum_rotated_sorted_arr.cpp in Sources */,
				97D02B8A1AB76A6000C73F56 /* Insert Least Num of Char to make String Palindrome.cpp in Sources */,
				97E24B391B275572000AEE2E /* Heap Implementation.cpp in Sources */,
				97D02B5D1AB6587E00C73F56 /* Word Ladder.cpp in Sources */,
				976D3F2A1AD21B8C0033B750 /* shortest_square_in_num.cpp in Sources */,
				E350ACEE1CD5C5E300DEE037 /* Influencer Finder.cpp in Sources */,
				976D3F1F1AD0E1E00033B750 /* 2D_arr.cpp in Sources */,
				97A4F1161AF2FAC300142761 /* Remove Nodes by Indices.cpp in Sources */,
				E3B15A041CCBEFD2005D0E22 /* Word Distance.cpp in Sources */,
				97D303F51A8317B900D60E6C /* Pre-order traverse.cpp in Sources */,
				97D02BBE1AB7745800C73F56 /* Is Subtree.cpp in Sources */,
				97CA53AB1AA64A200056534F /* Spiral Order Traverse II.cpp in Sources */,
				97D02B6B1AB690D200C73F56 /* Remove Dup in Unsorted List.cpp in Sources */,
				971C56711A5B6D5B001E0315 /* Copy Linked List with Random Pointer.cpp in Sources */,
				974D5B871A5C5F3F009A6D35 /* Common Num in Sorted Arr.cpp in Sources */,
				97B423251B4B693B00B8F329 /* Search with Empty Str.cpp in Sources */,
				974D5BB71A611908009A6D35 /* Max Sum Root to Leaf.cpp in Sources */,
				97DFBE5C1B3335280039800D /* Invert Binary Tree.cpp in Sources */,
				97895D1B1B1A883E00C33E15 /* Design BST.cpp in Sources */,
				97D02BA61AB7708F00C73F56 /* Is PostOrder of BST.cpp in Sources */,
				97B423161B49AFCB00B8F329 /* has Root btw Two Nodes.cpp in Sources */,
				9765FB641AB2B9EF00489CC0 /* Longest Increasing Subarray.cpp in Sources */,
				978AAA4F1A9E4DCB00ED046A /* Reverse a string.cpp in Sources */,
				97CA539D1AA4109F0056534F /* Group Anagrams.cpp in Sources */,
				97CA537E1AA2A7470056534F /* Rotate Image.cpp in Sources */,
				97619D1F1A58EA0900133E44 /* Selection Sort Array.cpp in Sources */,
				97D303F91A8318A600D60E6C /* Post-order traverse.cpp in Sources */,
				E3D583771CE3E93F00BE4A97 /* Reverse Vowels of a String.cpp in Sources */,
				97080B3D1A708D86007B809D /* Largest and Second Largest.cpp in Sources */,
				97D303F71A83189700D60E6C /* In-order traverse.cpp in Sources */,
				97A4F1121AF2DFF000142761 /* Intersection Union Diff of Two Sorted Arr.cpp in Sources */,
				97080AFF1A685F5D007B809D /* K-th Smallest Num in Two Sorted Arr.cpp in Sources */,
				97D02B5B1AB5411500C73F56 /* Reconstruct Complete Binary Tree From Level Order.cpp in Sources */,
				97080B011A688C92007B809D /* LRU Cache.cpp in Sources */,
				979A93791AB3F3E8007DE692 /* Largest Subsquare Surrounded by 1.cpp in Sources */,
				E3CDE5F11CBB0379008C0F71 /* K Closest to Target in Sorted Arr.cpp in Sources */,
				E350AD021CD81D4400DEE037 /* First Bad Version.cpp in Sources */,
				97080B371A6F7C61007B809D /* Remove Dup in Sorted Arr keep two.cpp in Sources */,
				97D74FCD1AF3D7FA00EE657D /* Mine.cpp in Sources */,
				979A93871AB529D4007DE692 /* Interleave Array.cpp in Sources */,
				97A4F10A1AF2ABFD00142761 /* Remove Linked List Elem.cpp in Sources */,
				97D320C21B56C5FF005A3C2B /* Insertion Sort Linked List.cpp in Sources */,
				97080B0F1A6C6B9B007B809D /* Could be Merged by Two Arr.cpp in Sources */,
				97D303E41A81A30900D60E6C /* Lowest Common Ancestor of BT.cpp in Sources */,
				97CA53851AA406DD0056534F /* Set Matrix Zero.cpp in Sources */,
				97BEF4891A7346B200FDB6DA /* shift string.cpp in Sources */,
				97C30C481B0FFA5200C2CE98 /* Virtual Function.cpp in Sources */,
				97BEF4951A75CE5C00FDB6DA /* 2Sum Smaller Find Value.cpp in Sources */,
				97080B201A6C78B9007B809D /* Generate Random Maze.cpp in Sources */,
				978AAA461A9CF2AA00ED046A /* 2Sum One Pair Find Index.cpp in Sources */,
				E37EFF861D52C40E00B50582 /* Intersection of Two Arrays II.cpp in Sources */,
				97D02BC21AB7754F00C73F56 /* Is Cousins in BT.cpp in Sources */,
				97C30C441B0FE7D800C2CE98 /* Templates Use.cpp in Sources */,
				978AAA511A9E502D00ED046A /* Shift Word.cpp in Sources */,
				97D74FCB1AF331C400EE657D /* word play.cpp in Sources */,
				97DFBE701B34CA210039800D /* Count Complete Tree Nodes.cpp in Sources */,
				971C56511A5A3372001E0315 /* Fibonacci sequence.cpp in Sources */,
				97DFBE761B35157E0039800D /* Insert Interval.cpp in Sources */,
				97D304021A83582C00D60E6C /* Tweaked Identical Binary Trees.cpp in Sources */,
				97D02B821AB7687A00C73F56 /* Transform a BST to Greater Sum Tree.cpp in Sources */,
				97D6AC5A1AD4E331007F28C7 /* Selection Sort Linked List.cpp in Sources */,
				974D5B981A5CE865009A6D35 /* Decompress String II.cpp in Sources */,
				974D5BA81A5E2DF1009A6D35 /* Reverse Linked List.cpp in Sources */,
				97D02BA81AB7712400C73F56 /* Smallest Window in Str Contain all Char of another Str.cpp in Sources */,
				E37EFF7A1D49757800B50582 /* Merge Intervals.cpp in Sources */,
				97D02B7C1AB7677D00C73F56 /* Largest Val from Arr of Nums in String type.cpp in Sources */,
				97DFBE7E1B36396D0039800D /* Roman to Integer.cpp in Sources */,
				97CA53791AA29F0A0056534F /* Merge Two Sorted Arr.cpp in Sources */,
				97080AFC1A65CACF007B809D /* Sort Integer.cpp in Sources */,
				97D304001A8357A800D60E6C /* is BST.cpp in Sources */,
				97D303EE1A81EBF200D60E6C /* Sort String.cpp in Sources */,
				E350ACF71CD6F8C100DEE037 /* Huffman Encoding.cpp in Sources */,
				97D02B881AB769D400C73F56 /* Reconstruct BST from PreOrder.cpp in Sources */,
				97CA537C1AA2A5350056534F /* Find Insert Position NoDup.cpp in Sources */,
				9729598C1A7B064100C8BC04 /* K Smallest Num in Unsorted Array.cpp in Sources */,
				97080B1C1A6C776A007B809D /* Largest Set of Points with Positive Slope.cpp in Sources */,
				97080B3B1A70837B007B809D /* Largest and Smallest.cpp in Sources */,
				97DFBE351B31DE030039800D /* In-order Successor Node.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		97619D181A58E9B500133E44 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		97619D191A58E9B500133E44 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
			};
			name = Release;
		};
		97619D1B1A58E9B500133E44 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		97619D1C1A58E9B500133E44 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		97619D0E1A58E9B500133E44 /* Build configuration list for PBXProject "LaiOffer" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97619D181A58E9B500133E44 /* Debug */,
				97619D191A58E9B500133E44 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97619D1A1A58E9B500133E44 /* Build configuration list for PBXNativeTarget "LaiOffer" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97619D1B1A58E9B500133E44 /* Debug */,
				97619D1C1A58E9B500133E44 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 97619D0B1A58E9B500133E44 /* Project object */;
}
